# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget descartes::descartes_light_core descartes::descartes_light descartes::descartes_light_gantry)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Create imported target descartes::descartes_light_core
add_library(descartes::descartes_light_core INTERFACE IMPORTED)

set_target_properties(descartes::descartes_light_core PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "DESCARTES_BUILDING_LIBRARY=ON"
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_COMPILE_OPTIONS "-Wall;-Wextra;-Wsuggest-override;-Wconversion;-Wsign-conversion;-mno-avx"
  INTERFACE_INCLUDE_DIRECTORIES "/root/crs_ws_fanuc/src/descartes_light/descartes_light/include;/usr/include/eigen3"
  INTERFACE_LINK_LIBRARIES "console_bridge::console_bridge"
)

# Create imported target descartes::descartes_light
add_library(descartes::descartes_light SHARED IMPORTED)

set_target_properties(descartes::descartes_light PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_COMPILE_OPTIONS "-mno-avx"
  INTERFACE_INCLUDE_DIRECTORIES "/root/crs_ws_fanuc/src/descartes_light/descartes_light/include;/usr/include/eigen3"
  INTERFACE_LINK_LIBRARIES "console_bridge::console_bridge;OpenMP::OpenMP_CXX"
)

# Create imported target descartes::descartes_light_gantry
add_library(descartes::descartes_light_gantry SHARED IMPORTED)

set_target_properties(descartes::descartes_light_gantry PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_11"
  INTERFACE_COMPILE_OPTIONS "-mno-avx"
  INTERFACE_INCLUDE_DIRECTORIES "/root/crs_ws_fanuc/src/descartes_light/descartes_light/include;/usr/include/eigen3"
  INTERFACE_LINK_LIBRARIES "console_bridge::console_bridge;descartes::descartes_light_core"
)

# Import target "descartes::descartes_light" for configuration "Debug"
set_property(TARGET descartes::descartes_light APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(descartes::descartes_light PROPERTIES
  IMPORTED_LOCATION_DEBUG "/root/crs_ws_fanuc/build/descartes_light/libdescartes_light.so"
  IMPORTED_SONAME_DEBUG "libdescartes_light.so"
  )

# Import target "descartes::descartes_light_gantry" for configuration "Debug"
set_property(TARGET descartes::descartes_light_gantry APPEND PROPERTY IMPORTED_CONFIGURATIONS DEBUG)
set_target_properties(descartes::descartes_light_gantry PROPERTIES
  IMPORTED_LOCATION_DEBUG "/root/crs_ws_fanuc/build/descartes_light/libdescartes_light_gantry.so"
  IMPORTED_SONAME_DEBUG "libdescartes_light_gantry.so"
  )

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
