# generated from rosidl_generator_py/resource/_idl.py.em
# with input from tesseract_msgs:msg/TesseractInitInfo.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_TesseractInitInfo(type):
    """Metaclass of message 'TesseractInitInfo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
        'SCENE_GRAPH': 0,
        'SCENE_GRAPH_SRDF_MODEL': 1,
        'URDF_STRING': 2,
        'URDF_STRING_SRDF_STRING': 3,
        'URDF_PATH': 4,
        'URDF_PATH_SRDF_PATH': 5,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('tesseract_msgs')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'tesseract_msgs.msg.TesseractInitInfo')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__tesseract_init_info
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__tesseract_init_info
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__tesseract_init_info
            cls._TYPE_SUPPORT = module.type_support_msg__msg__tesseract_init_info
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__tesseract_init_info

            from tesseract_msgs.msg import SceneGraph
            if SceneGraph.__class__._TYPE_SUPPORT is None:
                SceneGraph.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'SCENE_GRAPH': cls.__constants['SCENE_GRAPH'],
            'SCENE_GRAPH_SRDF_MODEL': cls.__constants['SCENE_GRAPH_SRDF_MODEL'],
            'URDF_STRING': cls.__constants['URDF_STRING'],
            'URDF_STRING_SRDF_STRING': cls.__constants['URDF_STRING_SRDF_STRING'],
            'URDF_PATH': cls.__constants['URDF_PATH'],
            'URDF_PATH_SRDF_PATH': cls.__constants['URDF_PATH_SRDF_PATH'],
        }

    @property
    def SCENE_GRAPH(self):
        """Message constant 'SCENE_GRAPH'."""
        return Metaclass_TesseractInitInfo.__constants['SCENE_GRAPH']

    @property
    def SCENE_GRAPH_SRDF_MODEL(self):
        """Message constant 'SCENE_GRAPH_SRDF_MODEL'."""
        return Metaclass_TesseractInitInfo.__constants['SCENE_GRAPH_SRDF_MODEL']

    @property
    def URDF_STRING(self):
        """Message constant 'URDF_STRING'."""
        return Metaclass_TesseractInitInfo.__constants['URDF_STRING']

    @property
    def URDF_STRING_SRDF_STRING(self):
        """Message constant 'URDF_STRING_SRDF_STRING'."""
        return Metaclass_TesseractInitInfo.__constants['URDF_STRING_SRDF_STRING']

    @property
    def URDF_PATH(self):
        """Message constant 'URDF_PATH'."""
        return Metaclass_TesseractInitInfo.__constants['URDF_PATH']

    @property
    def URDF_PATH_SRDF_PATH(self):
        """Message constant 'URDF_PATH_SRDF_PATH'."""
        return Metaclass_TesseractInitInfo.__constants['URDF_PATH_SRDF_PATH']


class TesseractInitInfo(metaclass=Metaclass_TesseractInitInfo):
    """
    Message class 'TesseractInitInfo'.

    Constants:
      SCENE_GRAPH
      SCENE_GRAPH_SRDF_MODEL
      URDF_STRING
      URDF_STRING_SRDF_STRING
      URDF_PATH
      URDF_PATH_SRDF_PATH
    """

    __slots__ = [
        '_type',
        '_scene_graph',
        '_urdf_string',
        '_srdf_string',
        '_urdf_path',
        '_srdf_path',
    ]

    _fields_and_field_types = {
        'type': 'uint8',
        'scene_graph': 'tesseract_msgs/SceneGraph',
        'urdf_string': 'string',
        'srdf_string': 'string',
        'urdf_path': 'string',
        'srdf_path': 'string',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['tesseract_msgs', 'msg'], 'SceneGraph'),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.type = kwargs.get('type', int())
        from tesseract_msgs.msg import SceneGraph
        self.scene_graph = kwargs.get('scene_graph', SceneGraph())
        self.urdf_string = kwargs.get('urdf_string', str())
        self.srdf_string = kwargs.get('srdf_string', str())
        self.urdf_path = kwargs.get('urdf_path', str())
        self.srdf_path = kwargs.get('srdf_path', str())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.type != other.type:
            return False
        if self.scene_graph != other.scene_graph:
            return False
        if self.urdf_string != other.urdf_string:
            return False
        if self.srdf_string != other.srdf_string:
            return False
        if self.urdf_path != other.urdf_path:
            return False
        if self.srdf_path != other.srdf_path:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property  # noqa: A003
    def type(self):
        """Message field 'type'."""
        return self._type

    @type.setter  # noqa: A003
    def type(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'type' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'type' field must be an unsigned integer in [0, 255]"
        self._type = value

    @property
    def scene_graph(self):
        """Message field 'scene_graph'."""
        return self._scene_graph

    @scene_graph.setter
    def scene_graph(self, value):
        if __debug__:
            from tesseract_msgs.msg import SceneGraph
            assert \
                isinstance(value, SceneGraph), \
                "The 'scene_graph' field must be a sub message of type 'SceneGraph'"
        self._scene_graph = value

    @property
    def urdf_string(self):
        """Message field 'urdf_string'."""
        return self._urdf_string

    @urdf_string.setter
    def urdf_string(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'urdf_string' field must be of type 'str'"
        self._urdf_string = value

    @property
    def srdf_string(self):
        """Message field 'srdf_string'."""
        return self._srdf_string

    @srdf_string.setter
    def srdf_string(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'srdf_string' field must be of type 'str'"
        self._srdf_string = value

    @property
    def urdf_path(self):
        """Message field 'urdf_path'."""
        return self._urdf_path

    @urdf_path.setter
    def urdf_path(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'urdf_path' field must be of type 'str'"
        self._urdf_path = value

    @property
    def srdf_path(self):
        """Message field 'srdf_path'."""
        return self._srdf_path

    @srdf_path.setter
    def srdf_path(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'srdf_path' field must be of type 'str'"
        self._srdf_path = value
