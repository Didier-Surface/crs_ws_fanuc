# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tesseract_python
else:
    import _tesseract_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _tesseract_python.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _tesseract_python.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _tesseract_python.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        return _tesseract_python.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        return _tesseract_python.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_python.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _tesseract_python.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _tesseract_python.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _tesseract_python.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _tesseract_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        return _tesseract_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _tesseract_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        return _tesseract_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        return _tesseract_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _tesseract_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _tesseract_python:
_tesseract_python.SwigPyIterator_swigregister(SwigPyIterator)

class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.vector_string___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.vector_string___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _tesseract_python.vector_string___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        return _tesseract_python.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.vector_string___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        return _tesseract_python.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.vector_string___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _tesseract_python.vector_string___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.vector_string___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _tesseract_python.vector_string_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _tesseract_python.vector_string_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.vector_string_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _tesseract_python.vector_string_size(self)

    def swap(self, v: "vector_string") -> "void":
        return _tesseract_python.vector_string_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _tesseract_python.vector_string_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _tesseract_python.vector_string_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _tesseract_python.vector_string_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _tesseract_python.vector_string_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.vector_string_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _tesseract_python.vector_string_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.vector_string_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _tesseract_python.vector_string_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.vector_string_swiginit(self, _tesseract_python.new_vector_string(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        return _tesseract_python.vector_string_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _tesseract_python.vector_string_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _tesseract_python.vector_string_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        return _tesseract_python.vector_string_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.vector_string_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.vector_string_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        return _tesseract_python.vector_string_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _tesseract_python.vector_string_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_vector_string

# Register vector_string in _tesseract_python:
_tesseract_python.vector_string_swigregister(vector_string)

class pair_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.pair_string_swiginit(self, _tesseract_python.new_pair_string(*args))
    first = property(_tesseract_python.pair_string_first_get, _tesseract_python.pair_string_first_set)
    second = property(_tesseract_python.pair_string_second_get, _tesseract_python.pair_string_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _tesseract_python.delete_pair_string

# Register pair_string in _tesseract_python:
_tesseract_python.pair_string_swigregister(pair_string)

class vector_pair_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.vector_pair_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.vector_pair_string___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.vector_pair_string___bool__(self)

    def __len__(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _tesseract_python.vector_pair_string___len__(self)

    def __getslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *":
        return _tesseract_python.vector_pair_string___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.vector_pair_string___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::pair< std::string,std::string > >::difference_type", j: "std::vector< std::pair< std::string,std::string > >::difference_type") -> "void":
        return _tesseract_python.vector_pair_string___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.vector_pair_string___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _tesseract_python.vector_pair_string___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.vector_pair_string___setitem__(self, *args)

    def pop(self) -> "std::vector< std::pair< std::string,std::string > >::value_type":
        return _tesseract_python.vector_pair_string_pop(self)

    def append(self, x: "pair_string") -> "void":
        return _tesseract_python.vector_pair_string_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.vector_pair_string_empty(self)

    def size(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _tesseract_python.vector_pair_string_size(self)

    def swap(self, v: "vector_pair_string") -> "void":
        return _tesseract_python.vector_pair_string_swap(self, v)

    def begin(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _tesseract_python.vector_pair_string_begin(self)

    def end(self) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _tesseract_python.vector_pair_string_end(self)

    def rbegin(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _tesseract_python.vector_pair_string_rbegin(self)

    def rend(self) -> "std::vector< std::pair< std::string,std::string > >::reverse_iterator":
        return _tesseract_python.vector_pair_string_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.vector_pair_string_clear(self)

    def get_allocator(self) -> "std::vector< std::pair< std::string,std::string > >::allocator_type":
        return _tesseract_python.vector_pair_string_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.vector_pair_string_pop_back(self)

    def erase(self, *args) -> "std::vector< std::pair< std::string,std::string > >::iterator":
        return _tesseract_python.vector_pair_string_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.vector_pair_string_swiginit(self, _tesseract_python.new_vector_pair_string(*args))

    def push_back(self, x: "pair_string") -> "void":
        return _tesseract_python.vector_pair_string_push_back(self, x)

    def front(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _tesseract_python.vector_pair_string_front(self)

    def back(self) -> "std::vector< std::pair< std::string,std::string > >::value_type const &":
        return _tesseract_python.vector_pair_string_back(self)

    def assign(self, n: "std::vector< std::pair< std::string,std::string > >::size_type", x: "pair_string") -> "void":
        return _tesseract_python.vector_pair_string_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.vector_pair_string_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.vector_pair_string_insert(self, *args)

    def reserve(self, n: "std::vector< std::pair< std::string,std::string > >::size_type") -> "void":
        return _tesseract_python.vector_pair_string_reserve(self, n)

    def capacity(self) -> "std::vector< std::pair< std::string,std::string > >::size_type":
        return _tesseract_python.vector_pair_string_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_vector_pair_string

# Register vector_pair_string in _tesseract_python:
_tesseract_python.vector_pair_string_swigregister(vector_pair_string)

class map_string_vector_pair_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_pair_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_vector_pair_string___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_vector_pair_string___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::size_type":
        return _tesseract_python.map_string_vector_pair_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::mapped_type const &":
        return _tesseract_python.map_string_vector_pair_string___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "void":
        return _tesseract_python.map_string_vector_pair_string___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_vector_pair_string_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_pair_string_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_pair_string_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_pair_string_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_vector_pair_string___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_pair_string_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_pair_string_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_vector_pair_string___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_pair_string_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_vector_pair_string_swiginit(self, _tesseract_python.new_map_string_vector_pair_string(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_vector_pair_string_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::size_type":
        return _tesseract_python.map_string_vector_pair_string_size(self)

    def swap(self, v: "map_string_vector_pair_string") -> "void":
        return _tesseract_python.map_string_vector_pair_string_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::iterator":
        return _tesseract_python.map_string_vector_pair_string_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::iterator":
        return _tesseract_python.map_string_vector_pair_string_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_vector_pair_string_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::allocator_type":
        return _tesseract_python.map_string_vector_pair_string_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::size_type":
        return _tesseract_python.map_string_vector_pair_string_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_vector_pair_string_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::key_type const &") -> "std::unordered_map< std::string,std::vector< std::pair< std::string,std::string > > >::iterator":
        return _tesseract_python.map_string_vector_pair_string_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_vector_pair_string

# Register map_string_vector_pair_string in _tesseract_python:
_tesseract_python.map_string_vector_pair_string_swigregister(map_string_vector_pair_string)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.vector_double___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _tesseract_python.vector_double___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        return _tesseract_python.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.vector_double___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        return _tesseract_python.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _tesseract_python.vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _tesseract_python.vector_double_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        return _tesseract_python.vector_double_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.vector_double_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _tesseract_python.vector_double_size(self)

    def swap(self, v: "vector_double") -> "void":
        return _tesseract_python.vector_double_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _tesseract_python.vector_double_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _tesseract_python.vector_double_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _tesseract_python.vector_double_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _tesseract_python.vector_double_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.vector_double_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _tesseract_python.vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _tesseract_python.vector_double_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.vector_double_swiginit(self, _tesseract_python.new_vector_double(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        return _tesseract_python.vector_double_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _tesseract_python.vector_double_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _tesseract_python.vector_double_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        return _tesseract_python.vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.vector_double_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        return _tesseract_python.vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _tesseract_python.vector_double_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_vector_double

# Register vector_double in _tesseract_python:
_tesseract_python.vector_double_swigregister(vector_double)

class map_string_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_vector_double___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _tesseract_python.map_string_vector_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::mapped_type const &":
        return _tesseract_python.map_string_vector_double___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "void":
        return _tesseract_python.map_string_vector_double___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_vector_double_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_double_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_double_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_double_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_vector_double___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_double_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_vector_double_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_vector_double___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_vector_double_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_vector_double_swiginit(self, _tesseract_python.new_map_string_vector_double(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_vector_double_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _tesseract_python.map_string_vector_double_size(self)

    def swap(self, v: "map_string_vector_double") -> "void":
        return _tesseract_python.map_string_vector_double_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _tesseract_python.map_string_vector_double_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _tesseract_python.map_string_vector_double_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_vector_double_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::vector< double > >::allocator_type":
        return _tesseract_python.map_string_vector_double_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::size_type":
        return _tesseract_python.map_string_vector_double_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_vector_double_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::vector< double > >::key_type const &") -> "std::unordered_map< std::string,std::vector< double > >::iterator":
        return _tesseract_python.map_string_vector_double_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_vector_double

# Register map_string_vector_double in _tesseract_python:
_tesseract_python.map_string_vector_double_swigregister(map_string_vector_double)

class map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_double___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,double >::size_type":
        return _tesseract_python.map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::mapped_type const &":
        return _tesseract_python.map_string_double___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "void":
        return _tesseract_python.map_string_double___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _tesseract_python.map_string_double_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_double_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_double_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_double_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,double >::key_type const &") -> "bool":
        return _tesseract_python.map_string_double___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_double_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_double_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_double___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_double_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_double_swiginit(self, _tesseract_python.new_map_string_double(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_double_empty(self)

    def size(self) -> "std::unordered_map< std::string,double >::size_type":
        return _tesseract_python.map_string_double_size(self)

    def swap(self, v: "map_string_double") -> "void":
        return _tesseract_python.map_string_double_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,double >::iterator":
        return _tesseract_python.map_string_double_begin(self)

    def end(self) -> "std::unordered_map< std::string,double >::iterator":
        return _tesseract_python.map_string_double_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_double_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,double >::allocator_type":
        return _tesseract_python.map_string_double_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::size_type":
        return _tesseract_python.map_string_double_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_double_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,double >::key_type const &") -> "std::unordered_map< std::string,double >::iterator":
        return _tesseract_python.map_string_double_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_double

# Register map_string_double in _tesseract_python:
_tesseract_python.map_string_double_swigregister(map_string_double)

class map_string_map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_map_string_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_map_string_double___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _tesseract_python.map_string_map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::mapped_type const &":
        return _tesseract_python.map_string_map_string_double___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "void":
        return _tesseract_python.map_string_map_string_double___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_map_string_double_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_double_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_double_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_double_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_map_string_double___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_double_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_double_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_map_string_double___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_double_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_map_string_double_swiginit(self, _tesseract_python.new_map_string_map_string_double(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_map_string_double_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _tesseract_python.map_string_map_string_double_size(self)

    def swap(self, v: "map_string_map_string_double") -> "void":
        return _tesseract_python.map_string_map_string_double_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _tesseract_python.map_string_map_string_double_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _tesseract_python.map_string_map_string_double_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_map_string_double_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::allocator_type":
        return _tesseract_python.map_string_map_string_double_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::size_type":
        return _tesseract_python.map_string_map_string_double_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_map_string_double_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,double > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,double > >::iterator":
        return _tesseract_python.map_string_map_string_double_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_map_string_double

# Register map_string_map_string_double in _tesseract_python:
_tesseract_python.map_string_map_string_double_swigregister(map_string_map_string_double)

class map_string_map_string_map_string_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_map_string_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_map_string_map_string_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_map_string_map_string_double___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _tesseract_python.map_string_map_string_map_string_double___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::mapped_type const &":
        return _tesseract_python.map_string_map_string_map_string_double___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "void":
        return _tesseract_python.map_string_map_string_map_string_double___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_map_string_map_string_double_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_map_string_double_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_map_string_double_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_map_string_double_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "bool":
        return _tesseract_python.map_string_map_string_map_string_double___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_map_string_double_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_map_string_map_string_double_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_map_string_map_string_double___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_map_string_map_string_double_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_map_string_map_string_double_swiginit(self, _tesseract_python.new_map_string_map_string_map_string_double(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_map_string_map_string_double_empty(self)

    def size(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _tesseract_python.map_string_map_string_map_string_double_size(self)

    def swap(self, v: "map_string_map_string_map_string_double") -> "void":
        return _tesseract_python.map_string_map_string_map_string_double_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _tesseract_python.map_string_map_string_map_string_double_begin(self)

    def end(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _tesseract_python.map_string_map_string_map_string_double_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_map_string_map_string_double_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::allocator_type":
        return _tesseract_python.map_string_map_string_map_string_double_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::size_type":
        return _tesseract_python.map_string_map_string_map_string_double_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_map_string_map_string_double_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::key_type const &") -> "std::unordered_map< std::string,std::unordered_map< std::string,std::unordered_map< std::string,double > > >::iterator":
        return _tesseract_python.map_string_map_string_map_string_double_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_map_string_map_string_double

# Register map_string_map_string_map_string_double in _tesseract_python:
_tesseract_python.map_string_map_string_map_string_double_swigregister(map_string_map_string_map_string_double)

class VectorIsometry3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.VectorIsometry3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.VectorIsometry3d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.VectorIsometry3d___bool__(self)

    def __len__(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::size_type":
        return _tesseract_python.VectorIsometry3d___len__(self)

    def __getslice__(self, i: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::difference_type", j: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::difference_type") -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > > *":
        return _tesseract_python.VectorIsometry3d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.VectorIsometry3d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::difference_type", j: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::difference_type") -> "void":
        return _tesseract_python.VectorIsometry3d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.VectorIsometry3d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &":
        return _tesseract_python.VectorIsometry3d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.VectorIsometry3d___setitem__(self, *args)

    def pop(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type":
        return _tesseract_python.VectorIsometry3d_pop(self)

    def append(self, x: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &") -> "void":
        return _tesseract_python.VectorIsometry3d_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.VectorIsometry3d_empty(self)

    def size(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::size_type":
        return _tesseract_python.VectorIsometry3d_size(self)

    def swap(self, v: "VectorIsometry3d") -> "void":
        return _tesseract_python.VectorIsometry3d_swap(self, v)

    def begin(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::iterator":
        return _tesseract_python.VectorIsometry3d_begin(self)

    def end(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::iterator":
        return _tesseract_python.VectorIsometry3d_end(self)

    def rbegin(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::reverse_iterator":
        return _tesseract_python.VectorIsometry3d_rbegin(self)

    def rend(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::reverse_iterator":
        return _tesseract_python.VectorIsometry3d_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.VectorIsometry3d_clear(self)

    def get_allocator(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::allocator_type":
        return _tesseract_python.VectorIsometry3d_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.VectorIsometry3d_pop_back(self)

    def erase(self, *args) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::iterator":
        return _tesseract_python.VectorIsometry3d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.VectorIsometry3d_swiginit(self, _tesseract_python.new_VectorIsometry3d(*args))

    def push_back(self, x: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &") -> "void":
        return _tesseract_python.VectorIsometry3d_push_back(self, x)

    def front(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &":
        return _tesseract_python.VectorIsometry3d_front(self)

    def back(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &":
        return _tesseract_python.VectorIsometry3d_back(self)

    def assign(self, n: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::size_type", x: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::value_type const &") -> "void":
        return _tesseract_python.VectorIsometry3d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.VectorIsometry3d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.VectorIsometry3d_insert(self, *args)

    def reserve(self, n: "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::size_type") -> "void":
        return _tesseract_python.VectorIsometry3d_reserve(self, n)

    def capacity(self) -> "std::vector< Eigen::Isometry3d,Eigen::aligned_allocator< Eigen::Isometry3d > >::size_type":
        return _tesseract_python.VectorIsometry3d_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_VectorIsometry3d

# Register VectorIsometry3d in _tesseract_python:
_tesseract_python.VectorIsometry3d_swigregister(VectorIsometry3d)

class VectorVector4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.VectorVector4d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.VectorVector4d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.VectorVector4d___bool__(self)

    def __len__(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::size_type":
        return _tesseract_python.VectorVector4d___len__(self)

    def __getslice__(self, i: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::difference_type", j: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::difference_type") -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > > *":
        return _tesseract_python.VectorVector4d___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.VectorVector4d___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::difference_type", j: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::difference_type") -> "void":
        return _tesseract_python.VectorVector4d___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.VectorVector4d___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &":
        return _tesseract_python.VectorVector4d___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.VectorVector4d___setitem__(self, *args)

    def pop(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type":
        return _tesseract_python.VectorVector4d_pop(self)

    def append(self, x: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &") -> "void":
        return _tesseract_python.VectorVector4d_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.VectorVector4d_empty(self)

    def size(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::size_type":
        return _tesseract_python.VectorVector4d_size(self)

    def swap(self, v: "VectorVector4d") -> "void":
        return _tesseract_python.VectorVector4d_swap(self, v)

    def begin(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::iterator":
        return _tesseract_python.VectorVector4d_begin(self)

    def end(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::iterator":
        return _tesseract_python.VectorVector4d_end(self)

    def rbegin(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::reverse_iterator":
        return _tesseract_python.VectorVector4d_rbegin(self)

    def rend(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::reverse_iterator":
        return _tesseract_python.VectorVector4d_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.VectorVector4d_clear(self)

    def get_allocator(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::allocator_type":
        return _tesseract_python.VectorVector4d_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.VectorVector4d_pop_back(self)

    def erase(self, *args) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::iterator":
        return _tesseract_python.VectorVector4d_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.VectorVector4d_swiginit(self, _tesseract_python.new_VectorVector4d(*args))

    def push_back(self, x: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &") -> "void":
        return _tesseract_python.VectorVector4d_push_back(self, x)

    def front(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &":
        return _tesseract_python.VectorVector4d_front(self)

    def back(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &":
        return _tesseract_python.VectorVector4d_back(self)

    def assign(self, n: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::size_type", x: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::value_type const &") -> "void":
        return _tesseract_python.VectorVector4d_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.VectorVector4d_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.VectorVector4d_insert(self, *args)

    def reserve(self, n: "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::size_type") -> "void":
        return _tesseract_python.VectorVector4d_reserve(self, n)

    def capacity(self) -> "std::vector< Eigen::Vector4d,Eigen::aligned_allocator< Eigen::Vector4d > >::size_type":
        return _tesseract_python.VectorVector4d_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_VectorVector4d

# Register VectorVector4d in _tesseract_python:
_tesseract_python.VectorVector4d_swigregister(VectorVector4d)

class TransformMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.TransformMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.TransformMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.TransformMap___bool__(self)

    def __len__(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::size_type":
        return _tesseract_python.TransformMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::mapped_type const &":
        return _tesseract_python.TransformMap___getitem__(self, key)

    def __delitem__(self, key: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "void":
        return _tesseract_python.TransformMap___delitem__(self, key)

    def has_key(self, key: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "bool":
        return _tesseract_python.TransformMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.TransformMap_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.TransformMap_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.TransformMap_items(self)

    def __contains__(self, key: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "bool":
        return _tesseract_python.TransformMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.TransformMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.TransformMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.TransformMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.TransformMap_asdict(self)

    def __init__(self, *args):
        _tesseract_python.TransformMap_swiginit(self, _tesseract_python.new_TransformMap(*args))

    def empty(self) -> "bool":
        return _tesseract_python.TransformMap_empty(self)

    def size(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::size_type":
        return _tesseract_python.TransformMap_size(self)

    def swap(self, v: "TransformMap") -> "void":
        return _tesseract_python.TransformMap_swap(self, v)

    def begin(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::iterator":
        return _tesseract_python.TransformMap_begin(self)

    def end(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::iterator":
        return _tesseract_python.TransformMap_end(self)

    def rbegin(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::reverse_iterator":
        return _tesseract_python.TransformMap_rbegin(self)

    def rend(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::reverse_iterator":
        return _tesseract_python.TransformMap_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.TransformMap_clear(self)

    def get_allocator(self) -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::allocator_type":
        return _tesseract_python.TransformMap_get_allocator(self)

    def count(self, x: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::size_type":
        return _tesseract_python.TransformMap_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.TransformMap_erase(self, *args)

    def find(self, x: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::iterator":
        return _tesseract_python.TransformMap_find(self, x)

    def lower_bound(self, x: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::iterator":
        return _tesseract_python.TransformMap_lower_bound(self, x)

    def upper_bound(self, x: "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::key_type const &") -> "std::map< std::string,Eigen::Isometry3d,std::less< std::string >,Eigen::aligned_allocator< std::pair< std::string const,Eigen::Isometry3d > > >::iterator":
        return _tesseract_python.TransformMap_upper_bound(self, x)
    __swig_destroy__ = _tesseract_python.delete_TransformMap

# Register TransformMap in _tesseract_python:
_tesseract_python.TransformMap_swigregister(TransformMap)

class JointTrajectory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    joint_names = property(_tesseract_python.JointTrajectory_joint_names_get, _tesseract_python.JointTrajectory_joint_names_set)
    trajectory = property(_tesseract_python.JointTrajectory_trajectory_get, _tesseract_python.JointTrajectory_trajectory_set)

    def __init__(self):
        _tesseract_python.JointTrajectory_swiginit(self, _tesseract_python.new_JointTrajectory())
    __swig_destroy__ = _tesseract_python.delete_JointTrajectory

# Register JointTrajectory in _tesseract_python:
_tesseract_python.JointTrajectory_swigregister(JointTrajectory)

class StatusCategory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_StatusCategory

    def name(self) -> "std::string const &":
        return _tesseract_python.StatusCategory_name(self)

    def message(self, code: "int") -> "std::string":
        return _tesseract_python.StatusCategory_message(self, code)

    def __eq__(self, rhs: "StatusCategory") -> "bool":
        return _tesseract_python.StatusCategory___eq__(self, rhs)

    def __ne__(self, rhs: "StatusCategory") -> "bool":
        return _tesseract_python.StatusCategory___ne__(self, rhs)

# Register StatusCategory in _tesseract_python:
_tesseract_python.StatusCategory_swigregister(StatusCategory)

class GeneralStatusCategory(StatusCategory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.GeneralStatusCategory_swiginit(self, _tesseract_python.new_GeneralStatusCategory(*args))

    def name(self) -> "std::string const &":
        return _tesseract_python.GeneralStatusCategory_name(self)

    def message(self, code: "int") -> "std::string":
        return _tesseract_python.GeneralStatusCategory_message(self, code)
    IsConfigured = _tesseract_python.GeneralStatusCategory_IsConfigured
    Success = _tesseract_python.GeneralStatusCategory_Success
    Failure = _tesseract_python.GeneralStatusCategory_Failure
    IsNotConfigured = _tesseract_python.GeneralStatusCategory_IsNotConfigured
    __swig_destroy__ = _tesseract_python.delete_GeneralStatusCategory

# Register GeneralStatusCategory in _tesseract_python:
_tesseract_python.GeneralStatusCategory_swigregister(GeneralStatusCategory)

class StatusCode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.StatusCode_swiginit(self, _tesseract_python.new_StatusCode(*args))
    __swig_destroy__ = _tesseract_python.delete_StatusCode

    def value(self) -> "int":
        return _tesseract_python.StatusCode_value(self)

    def category(self) -> "tesseract_common::StatusCategory::ConstPtr const &":
        return _tesseract_python.StatusCode_category(self)

    def message(self) -> "std::string":
        return _tesseract_python.StatusCode_message(self)

    def setChild(self, child: "tesseract_common::StatusCode::ConstPtr") -> "void":
        return _tesseract_python.StatusCode_setChild(self, child)

    def getChild(self) -> "tesseract_common::StatusCode::ConstPtr const &":
        return _tesseract_python.StatusCode_getChild(self)

    def __nonzero__(self):
        return _tesseract_python.StatusCode___nonzero__(self)
    __bool__ = __nonzero__



    def __eq__(self, rhs: "StatusCode") -> "bool":
        return _tesseract_python.StatusCode___eq__(self, rhs)

    def __ne__(self, rhs: "StatusCode") -> "bool":
        return _tesseract_python.StatusCode___ne__(self, rhs)

# Register StatusCode in _tesseract_python:
_tesseract_python.StatusCode_swigregister(StatusCode)

class vector_uint8(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.vector_uint8_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.vector_uint8___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.vector_uint8___bool__(self)

    def __len__(self) -> "std::vector< unsigned char >::size_type":
        return _tesseract_python.vector_uint8___len__(self)

    def __getslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "std::vector< unsigned char,std::allocator< unsigned char > > *":
        return _tesseract_python.vector_uint8___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.vector_uint8___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< unsigned char >::difference_type", j: "std::vector< unsigned char >::difference_type") -> "void":
        return _tesseract_python.vector_uint8___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.vector_uint8___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< unsigned char >::value_type const &":
        return _tesseract_python.vector_uint8___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.vector_uint8___setitem__(self, *args)

    def pop(self) -> "std::vector< unsigned char >::value_type":
        return _tesseract_python.vector_uint8_pop(self)

    def append(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _tesseract_python.vector_uint8_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.vector_uint8_empty(self)

    def size(self) -> "std::vector< unsigned char >::size_type":
        return _tesseract_python.vector_uint8_size(self)

    def swap(self, v: "vector_uint8") -> "void":
        return _tesseract_python.vector_uint8_swap(self, v)

    def begin(self) -> "std::vector< unsigned char >::iterator":
        return _tesseract_python.vector_uint8_begin(self)

    def end(self) -> "std::vector< unsigned char >::iterator":
        return _tesseract_python.vector_uint8_end(self)

    def rbegin(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _tesseract_python.vector_uint8_rbegin(self)

    def rend(self) -> "std::vector< unsigned char >::reverse_iterator":
        return _tesseract_python.vector_uint8_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.vector_uint8_clear(self)

    def get_allocator(self) -> "std::vector< unsigned char >::allocator_type":
        return _tesseract_python.vector_uint8_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.vector_uint8_pop_back(self)

    def erase(self, *args) -> "std::vector< unsigned char >::iterator":
        return _tesseract_python.vector_uint8_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.vector_uint8_swiginit(self, _tesseract_python.new_vector_uint8(*args))

    def push_back(self, x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _tesseract_python.vector_uint8_push_back(self, x)

    def front(self) -> "std::vector< unsigned char >::value_type const &":
        return _tesseract_python.vector_uint8_front(self)

    def back(self) -> "std::vector< unsigned char >::value_type const &":
        return _tesseract_python.vector_uint8_back(self)

    def assign(self, n: "std::vector< unsigned char >::size_type", x: "std::vector< unsigned char >::value_type const &") -> "void":
        return _tesseract_python.vector_uint8_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.vector_uint8_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.vector_uint8_insert(self, *args)

    def reserve(self, n: "std::vector< unsigned char >::size_type") -> "void":
        return _tesseract_python.vector_uint8_reserve(self, n)

    def capacity(self) -> "std::vector< unsigned char >::size_type":
        return _tesseract_python.vector_uint8_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_vector_uint8

# Register vector_uint8 in _tesseract_python:
_tesseract_python.vector_uint8_swigregister(vector_uint8)

class Resource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_Resource

    def isFile(self) -> "bool":
        return _tesseract_python.Resource_isFile(self)

    def getUrl(self) -> "std::string":
        return _tesseract_python.Resource_getUrl(self)

    def getFilePath(self) -> "std::string":
        return _tesseract_python.Resource_getFilePath(self)

    def getResourceContents(self) -> "std::vector< uint8_t,std::allocator< uint8_t > >":
        return _tesseract_python.Resource_getResourceContents(self)

# Register Resource in _tesseract_python:
_tesseract_python.Resource_swigregister(Resource)

class BytesResource(Resource):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, url: "std::string const &", bytes: "uint8_t const *"):
        _tesseract_python.BytesResource_swiginit(self, _tesseract_python.new_BytesResource(url, bytes))

    def isFile(self) -> "bool":
        return _tesseract_python.BytesResource_isFile(self)

    def getUrl(self) -> "std::string":
        return _tesseract_python.BytesResource_getUrl(self)

    def getFilePath(self) -> "std::string":
        return _tesseract_python.BytesResource_getFilePath(self)

    def getResourceContents(self) -> "std::vector< uint8_t,std::allocator< uint8_t > >":
        return _tesseract_python.BytesResource_getResourceContents(self)

    def getResourceContentStream(self) -> "std::shared_ptr< std::istream >":
        return _tesseract_python.BytesResource_getResourceContentStream(self)
    __swig_destroy__ = _tesseract_python.delete_BytesResource

# Register BytesResource in _tesseract_python:
_tesseract_python.BytesResource_swigregister(BytesResource)

SPHERE = _tesseract_python.SPHERE
CYLINDER = _tesseract_python.CYLINDER
CAPSULE = _tesseract_python.CAPSULE
CONE = _tesseract_python.CONE
BOX = _tesseract_python.BOX
PLANE = _tesseract_python.PLANE
MESH = _tesseract_python.MESH
CONVEX_MESH = _tesseract_python.CONVEX_MESH
SDF_MESH = _tesseract_python.SDF_MESH
OCTREE = _tesseract_python.OCTREE
class Geometry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_Geometry

    def clone(self) -> "tesseract_geometry::Geometry::Ptr":
        return _tesseract_python.Geometry_clone(self)

    def getType(self) -> "tesseract_geometry::GeometryType":
        return _tesseract_python.Geometry_getType(self)

# Register Geometry in _tesseract_python:
_tesseract_python.Geometry_swigregister(Geometry)

class tesseract_geometry_Geometries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_geometry_Geometries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_Geometries___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_Geometries___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::size_type":
        return _tesseract_python.tesseract_geometry_Geometries___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry >,std::allocator< std::shared_ptr< tesseract_geometry::Geometry > > > *":
        return _tesseract_python.tesseract_geometry_Geometries___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::difference_type") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &":
        return _tesseract_python.tesseract_geometry_Geometries___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type":
        return _tesseract_python.tesseract_geometry_Geometries_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_geometry_Geometries_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::size_type":
        return _tesseract_python.tesseract_geometry_Geometries_size(self)

    def swap(self, v: "tesseract_geometry_Geometries") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::iterator":
        return _tesseract_python.tesseract_geometry_Geometries_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::iterator":
        return _tesseract_python.tesseract_geometry_Geometries_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_Geometries_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_Geometries_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::allocator_type":
        return _tesseract_python.tesseract_geometry_Geometries_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::iterator":
        return _tesseract_python.tesseract_geometry_Geometries_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_geometry_Geometries_swiginit(self, _tesseract_python.new_tesseract_geometry_Geometries(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &":
        return _tesseract_python.tesseract_geometry_Geometries_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &":
        return _tesseract_python.tesseract_geometry_Geometries_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::size_type", x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::size_type") -> "void":
        return _tesseract_python.tesseract_geometry_Geometries_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry > >::size_type":
        return _tesseract_python.tesseract_geometry_Geometries_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_geometry_Geometries

# Register tesseract_geometry_Geometries in _tesseract_python:
_tesseract_python.tesseract_geometry_Geometries_swigregister(tesseract_geometry_Geometries)

class tesseract_geometry_GeometriesConst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_geometry_GeometriesConst_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_GeometriesConst___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_GeometriesConst___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::size_type":
        return _tesseract_python.tesseract_geometry_GeometriesConst___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const >,std::allocator< std::shared_ptr< tesseract_geometry::Geometry const > > > *":
        return _tesseract_python.tesseract_geometry_GeometriesConst___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::difference_type") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &":
        return _tesseract_python.tesseract_geometry_GeometriesConst___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type":
        return _tesseract_python.tesseract_geometry_GeometriesConst_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_geometry_GeometriesConst_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::size_type":
        return _tesseract_python.tesseract_geometry_GeometriesConst_size(self)

    def swap(self, v: "tesseract_geometry_GeometriesConst") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::iterator":
        return _tesseract_python.tesseract_geometry_GeometriesConst_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::iterator":
        return _tesseract_python.tesseract_geometry_GeometriesConst_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_GeometriesConst_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_GeometriesConst_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::allocator_type":
        return _tesseract_python.tesseract_geometry_GeometriesConst_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::iterator":
        return _tesseract_python.tesseract_geometry_GeometriesConst_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_geometry_GeometriesConst_swiginit(self, _tesseract_python.new_tesseract_geometry_GeometriesConst(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &":
        return _tesseract_python.tesseract_geometry_GeometriesConst_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &":
        return _tesseract_python.tesseract_geometry_GeometriesConst_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::size_type", x: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::size_type") -> "void":
        return _tesseract_python.tesseract_geometry_GeometriesConst_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_geometry::Geometry const > >::size_type":
        return _tesseract_python.tesseract_geometry_GeometriesConst_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_geometry_GeometriesConst

# Register tesseract_geometry_GeometriesConst in _tesseract_python:
_tesseract_python.tesseract_geometry_GeometriesConst_swigregister(tesseract_geometry_GeometriesConst)

class Box(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, x: "double", y: "double", z: "double"):
        _tesseract_python.Box_swiginit(self, _tesseract_python.new_Box(x, y, z))
    __swig_destroy__ = _tesseract_python.delete_Box

    def getX(self) -> "double":
        return _tesseract_python.Box_getX(self)

    def getY(self) -> "double":
        return _tesseract_python.Box_getY(self)

    def getZ(self) -> "double":
        return _tesseract_python.Box_getZ(self)

# Register Box in _tesseract_python:
_tesseract_python.Box_swigregister(Box)

class Capsule(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r: "double", l: "double"):
        _tesseract_python.Capsule_swiginit(self, _tesseract_python.new_Capsule(r, l))
    __swig_destroy__ = _tesseract_python.delete_Capsule

    def getRadius(self) -> "double":
        return _tesseract_python.Capsule_getRadius(self)

    def getLength(self) -> "double":
        return _tesseract_python.Capsule_getLength(self)

# Register Capsule in _tesseract_python:
_tesseract_python.Capsule_swigregister(Capsule)

class Cone(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r: "double", l: "double"):
        _tesseract_python.Cone_swiginit(self, _tesseract_python.new_Cone(r, l))
    __swig_destroy__ = _tesseract_python.delete_Cone

    def getRadius(self) -> "double":
        return _tesseract_python.Cone_getRadius(self)

    def getLength(self) -> "double":
        return _tesseract_python.Cone_getLength(self)

    def clone(self) -> "tesseract_geometry::Geometry::Ptr":
        return _tesseract_python.Cone_clone(self)

# Register Cone in _tesseract_python:
_tesseract_python.Cone_swigregister(Cone)

class tesseract_geometry_ConvexMeshVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___bool__(self)

    def __len__(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___len__(self)

    def __getslice__(self, i: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::difference_type") -> "std::vector< tesseract_geometry::ConvexMesh::Ptr,std::allocator< tesseract_geometry::ConvexMesh::Ptr > > *":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::difference_type") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector___setitem__(self, *args)

    def pop(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_pop(self)

    def append(self, x: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_empty(self)

    def size(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_size(self)

    def swap(self, v: "tesseract_geometry_ConvexMeshVector") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_swap(self, v)

    def begin(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_begin(self)

    def end(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_end(self)

    def rbegin(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_rbegin(self)

    def rend(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_clear(self)

    def get_allocator(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::allocator_type":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_pop_back(self)

    def erase(self, *args) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_geometry_ConvexMeshVector_swiginit(self, _tesseract_python.new_tesseract_geometry_ConvexMeshVector(*args))

    def push_back(self, x: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_push_back(self, x)

    def front(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_front(self)

    def back(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_back(self)

    def assign(self, n: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::size_type", x: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_insert(self, *args)

    def reserve(self, n: "std::vector< tesseract_geometry::ConvexMesh::Ptr >::size_type") -> "void":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_reserve(self, n)

    def capacity(self) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_ConvexMeshVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_geometry_ConvexMeshVector

# Register tesseract_geometry_ConvexMeshVector in _tesseract_python:
_tesseract_python.tesseract_geometry_ConvexMeshVector_swigregister(tesseract_geometry_ConvexMeshVector)

class ConvexMesh(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_ConvexMesh

    def getVertices(self) -> "tesseract_common::VectorVector3d":
        return _tesseract_python.ConvexMesh_getVertices(self)

    def getFaces(self) -> "Eigen::VectorXi":
        return _tesseract_python.ConvexMesh_getFaces(self)

    def getVerticeCount(self) -> "int":
        return _tesseract_python.ConvexMesh_getVerticeCount(self)

    def getFaceCount(self) -> "int":
        return _tesseract_python.ConvexMesh_getFaceCount(self)

    def getResource(self) -> "tesseract_common::Resource::Ptr const":
        return _tesseract_python.ConvexMesh_getResource(self)

    def getScale(self) -> "Eigen::Vector3d const &":
        return _tesseract_python.ConvexMesh_getScale(self)

# Register ConvexMesh in _tesseract_python:
_tesseract_python.ConvexMesh_swigregister(ConvexMesh)

class Cylinder(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r: "double", l: "double"):
        _tesseract_python.Cylinder_swiginit(self, _tesseract_python.new_Cylinder(r, l))
    __swig_destroy__ = _tesseract_python.delete_Cylinder

    def getRadius(self) -> "double":
        return _tesseract_python.Cylinder_getRadius(self)

    def getLength(self) -> "double":
        return _tesseract_python.Cylinder_getLength(self)

# Register Cylinder in _tesseract_python:
_tesseract_python.Cylinder_swigregister(Cylinder)

class tesseract_geometry_MeshVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_geometry_MeshVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_MeshVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_MeshVector___bool__(self)

    def __len__(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_MeshVector___len__(self)

    def __getslice__(self, i: "std::vector< tesseract_geometry::Mesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::Mesh::Ptr >::difference_type") -> "std::vector< tesseract_geometry::Mesh::Ptr,std::allocator< tesseract_geometry::Mesh::Ptr > > *":
        return _tesseract_python.tesseract_geometry_MeshVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< tesseract_geometry::Mesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::Mesh::Ptr >::difference_type") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_MeshVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector___setitem__(self, *args)

    def pop(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::value_type":
        return _tesseract_python.tesseract_geometry_MeshVector_pop(self)

    def append(self, x: "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_geometry_MeshVector_empty(self)

    def size(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_MeshVector_size(self)

    def swap(self, v: "tesseract_geometry_MeshVector") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_swap(self, v)

    def begin(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_MeshVector_begin(self)

    def end(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_MeshVector_end(self)

    def rbegin(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_MeshVector_rbegin(self)

    def rend(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_MeshVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_clear(self)

    def get_allocator(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::allocator_type":
        return _tesseract_python.tesseract_geometry_MeshVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_pop_back(self)

    def erase(self, *args) -> "std::vector< tesseract_geometry::Mesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_MeshVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_geometry_MeshVector_swiginit(self, _tesseract_python.new_tesseract_geometry_MeshVector(*args))

    def push_back(self, x: "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_push_back(self, x)

    def front(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_MeshVector_front(self)

    def back(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_MeshVector_back(self)

    def assign(self, n: "std::vector< tesseract_geometry::Mesh::Ptr >::size_type", x: "std::vector< tesseract_geometry::Mesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_insert(self, *args)

    def reserve(self, n: "std::vector< tesseract_geometry::Mesh::Ptr >::size_type") -> "void":
        return _tesseract_python.tesseract_geometry_MeshVector_reserve(self, n)

    def capacity(self) -> "std::vector< tesseract_geometry::Mesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_MeshVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_geometry_MeshVector

# Register tesseract_geometry_MeshVector in _tesseract_python:
_tesseract_python.tesseract_geometry_MeshVector_swigregister(tesseract_geometry_MeshVector)

class Mesh(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_Mesh

    def getVertices(self) -> "tesseract_common::VectorVector3d":
        return _tesseract_python.Mesh_getVertices(self)

    def getTriangles(self) -> "Eigen::VectorXi":
        return _tesseract_python.Mesh_getTriangles(self)

    def getVerticeCount(self) -> "int":
        return _tesseract_python.Mesh_getVerticeCount(self)

    def getTriangleCount(self) -> "int":
        return _tesseract_python.Mesh_getTriangleCount(self)

    def getResource(self) -> "tesseract_common::Resource::Ptr const":
        return _tesseract_python.Mesh_getResource(self)

    def getScale(self) -> "Eigen::Vector3d const":
        return _tesseract_python.Mesh_getScale(self)

# Register Mesh in _tesseract_python:
_tesseract_python.Mesh_swigregister(Mesh)

class Octree(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    BOX = _tesseract_python.Octree_BOX
    SPHERE_INSIDE = _tesseract_python.Octree_SPHERE_INSIDE
    SPHERE_OUTSIDE = _tesseract_python.Octree_SPHERE_OUTSIDE
    __swig_destroy__ = _tesseract_python.delete_Octree

    def getSubType(self) -> "tesseract_geometry::Octree::SubType":
        return _tesseract_python.Octree_getSubType(self)

    def calcNumSubShapes(self) -> "long":
        return _tesseract_python.Octree_calcNumSubShapes(self)

# Register Octree in _tesseract_python:
_tesseract_python.Octree_swigregister(Octree)

class Plane(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, a: "double", b: "double", c: "double", d: "double"):
        _tesseract_python.Plane_swiginit(self, _tesseract_python.new_Plane(a, b, c, d))
    __swig_destroy__ = _tesseract_python.delete_Plane

    def getA(self) -> "double":
        return _tesseract_python.Plane_getA(self)

    def getB(self) -> "double":
        return _tesseract_python.Plane_getB(self)

    def getC(self) -> "double":
        return _tesseract_python.Plane_getC(self)

    def getD(self) -> "double":
        return _tesseract_python.Plane_getD(self)

# Register Plane in _tesseract_python:
_tesseract_python.Plane_swigregister(Plane)

class tesseract_geometry_SDFMeshVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___bool__(self)

    def __len__(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___len__(self)

    def __getslice__(self, i: "std::vector< tesseract_geometry::SDFMesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::SDFMesh::Ptr >::difference_type") -> "std::vector< tesseract_geometry::SDFMesh::Ptr,std::allocator< tesseract_geometry::SDFMesh::Ptr > > *":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< tesseract_geometry::SDFMesh::Ptr >::difference_type", j: "std::vector< tesseract_geometry::SDFMesh::Ptr >::difference_type") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector___setitem__(self, *args)

    def pop(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_pop(self)

    def append(self, x: "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_empty(self)

    def size(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_size(self)

    def swap(self, v: "tesseract_geometry_SDFMeshVector") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_swap(self, v)

    def begin(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_begin(self)

    def end(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_end(self)

    def rbegin(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_rbegin(self)

    def rend(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::reverse_iterator":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_clear(self)

    def get_allocator(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::allocator_type":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_pop_back(self)

    def erase(self, *args) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::iterator":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_geometry_SDFMeshVector_swiginit(self, _tesseract_python.new_tesseract_geometry_SDFMeshVector(*args))

    def push_back(self, x: "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_push_back(self, x)

    def front(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_front(self)

    def back(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_back(self)

    def assign(self, n: "std::vector< tesseract_geometry::SDFMesh::Ptr >::size_type", x: "std::vector< tesseract_geometry::SDFMesh::Ptr >::value_type const &") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_insert(self, *args)

    def reserve(self, n: "std::vector< tesseract_geometry::SDFMesh::Ptr >::size_type") -> "void":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_reserve(self, n)

    def capacity(self) -> "std::vector< tesseract_geometry::SDFMesh::Ptr >::size_type":
        return _tesseract_python.tesseract_geometry_SDFMeshVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_geometry_SDFMeshVector

# Register tesseract_geometry_SDFMeshVector in _tesseract_python:
_tesseract_python.tesseract_geometry_SDFMeshVector_swigregister(tesseract_geometry_SDFMeshVector)

class SDFMesh(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_SDFMesh

    def getVertices(self) -> "tesseract_common::VectorVector3d":
        return _tesseract_python.SDFMesh_getVertices(self)

    def getTriangles(self) -> "Eigen::VectorXi":
        return _tesseract_python.SDFMesh_getTriangles(self)

    def getVerticeCount(self) -> "int":
        return _tesseract_python.SDFMesh_getVerticeCount(self)

    def getTriangleCount(self) -> "int":
        return _tesseract_python.SDFMesh_getTriangleCount(self)

    def getResource(self) -> "tesseract_common::Resource::Ptr const":
        return _tesseract_python.SDFMesh_getResource(self)

    def getScale(self) -> "Eigen::Vector3d const &":
        return _tesseract_python.SDFMesh_getScale(self)

# Register SDFMesh in _tesseract_python:
_tesseract_python.SDFMesh_swigregister(SDFMesh)

class Sphere(Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r: "double"):
        _tesseract_python.Sphere_swiginit(self, _tesseract_python.new_Sphere(r))
    __swig_destroy__ = _tesseract_python.delete_Sphere

    def getRadius(self) -> "double":
        return _tesseract_python.Sphere_getRadius(self)

    def clone(self) -> "tesseract_geometry::Geometry::Ptr":
        return _tesseract_python.Sphere_clone(self)

# Register Sphere in _tesseract_python:
_tesseract_python.Sphere_swigregister(Sphere)


def isIdentical(geom1: "Geometry", geom2: "Geometry") -> "bool":
    return _tesseract_python.isIdentical(geom1, geom2)

def createMeshFromBytes(*args) -> "std::vector< tesseract_geometry::Mesh::Ptr,std::allocator< tesseract_geometry::Mesh::Ptr > >":
    return _tesseract_python.createMeshFromBytes(*args)

def createSDFMeshFromBytes(*args) -> "std::vector< tesseract_geometry::SDFMesh::Ptr,std::allocator< tesseract_geometry::SDFMesh::Ptr > >":
    return _tesseract_python.createSDFMeshFromBytes(*args)

def createConvexMeshFromBytes(*args) -> "std::vector< tesseract_geometry::ConvexMesh::Ptr,std::allocator< tesseract_geometry::ConvexMesh::Ptr > >":
    return _tesseract_python.createConvexMeshFromBytes(*args)
class JointDynamics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.JointDynamics_swiginit(self, _tesseract_python.new_JointDynamics())
    damping = property(_tesseract_python.JointDynamics_damping_get, _tesseract_python.JointDynamics_damping_set)
    friction = property(_tesseract_python.JointDynamics_friction_get, _tesseract_python.JointDynamics_friction_set)

    def clear(self) -> "void":
        return _tesseract_python.JointDynamics_clear(self)
    __swig_destroy__ = _tesseract_python.delete_JointDynamics

# Register JointDynamics in _tesseract_python:
_tesseract_python.JointDynamics_swigregister(JointDynamics)

class JointLimits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.JointLimits_swiginit(self, _tesseract_python.new_JointLimits())
    lower = property(_tesseract_python.JointLimits_lower_get, _tesseract_python.JointLimits_lower_set)
    upper = property(_tesseract_python.JointLimits_upper_get, _tesseract_python.JointLimits_upper_set)
    effort = property(_tesseract_python.JointLimits_effort_get, _tesseract_python.JointLimits_effort_set)
    velocity = property(_tesseract_python.JointLimits_velocity_get, _tesseract_python.JointLimits_velocity_set)

    def clear(self) -> "void":
        return _tesseract_python.JointLimits_clear(self)
    __swig_destroy__ = _tesseract_python.delete_JointLimits

# Register JointLimits in _tesseract_python:
_tesseract_python.JointLimits_swigregister(JointLimits)

class JointSafety(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.JointSafety_swiginit(self, _tesseract_python.new_JointSafety())
    soft_upper_limit = property(_tesseract_python.JointSafety_soft_upper_limit_get, _tesseract_python.JointSafety_soft_upper_limit_set)
    soft_lower_limit = property(_tesseract_python.JointSafety_soft_lower_limit_get, _tesseract_python.JointSafety_soft_lower_limit_set)
    k_position = property(_tesseract_python.JointSafety_k_position_get, _tesseract_python.JointSafety_k_position_set)
    k_velocity = property(_tesseract_python.JointSafety_k_velocity_get, _tesseract_python.JointSafety_k_velocity_set)

    def clear(self) -> "void":
        return _tesseract_python.JointSafety_clear(self)
    __swig_destroy__ = _tesseract_python.delete_JointSafety

# Register JointSafety in _tesseract_python:
_tesseract_python.JointSafety_swigregister(JointSafety)

class JointCalibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.JointCalibration_swiginit(self, _tesseract_python.new_JointCalibration())
    reference_position = property(_tesseract_python.JointCalibration_reference_position_get, _tesseract_python.JointCalibration_reference_position_set)
    rising = property(_tesseract_python.JointCalibration_rising_get, _tesseract_python.JointCalibration_rising_set)
    falling = property(_tesseract_python.JointCalibration_falling_get, _tesseract_python.JointCalibration_falling_set)

    def clear(self) -> "void":
        return _tesseract_python.JointCalibration_clear(self)
    __swig_destroy__ = _tesseract_python.delete_JointCalibration

# Register JointCalibration in _tesseract_python:
_tesseract_python.JointCalibration_swigregister(JointCalibration)

class JointMimic(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.JointMimic_swiginit(self, _tesseract_python.new_JointMimic())
    offset = property(_tesseract_python.JointMimic_offset_get, _tesseract_python.JointMimic_offset_set)
    multiplier = property(_tesseract_python.JointMimic_multiplier_get, _tesseract_python.JointMimic_multiplier_set)
    joint_name = property(_tesseract_python.JointMimic_joint_name_get, _tesseract_python.JointMimic_joint_name_set)

    def clear(self) -> "void":
        return _tesseract_python.JointMimic_clear(self)
    __swig_destroy__ = _tesseract_python.delete_JointMimic

# Register JointMimic in _tesseract_python:
_tesseract_python.JointMimic_swigregister(JointMimic)

JointType_UNKNOWN = _tesseract_python.JointType_UNKNOWN
JointType_REVOLUTE = _tesseract_python.JointType_REVOLUTE
JointType_CONTINUOUS = _tesseract_python.JointType_CONTINUOUS
JointType_PRISMATIC = _tesseract_python.JointType_PRISMATIC
JointType_FLOATING = _tesseract_python.JointType_FLOATING
JointType_PLANAR = _tesseract_python.JointType_PLANAR
JointType_FIXED = _tesseract_python.JointType_FIXED
class Joint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string"):
        _tesseract_python.Joint_swiginit(self, _tesseract_python.new_Joint(name))

    def getName(self) -> "std::string const &":
        return _tesseract_python.Joint_getName(self)
    type = property(_tesseract_python.Joint_type_get, _tesseract_python.Joint_type_set)
    axis = property(_tesseract_python.Joint_axis_get, _tesseract_python.Joint_axis_set)
    child_link_name = property(_tesseract_python.Joint_child_link_name_get, _tesseract_python.Joint_child_link_name_set)
    parent_link_name = property(_tesseract_python.Joint_parent_link_name_get, _tesseract_python.Joint_parent_link_name_set)
    parent_to_joint_origin_transform = property(_tesseract_python.Joint_parent_to_joint_origin_transform_get, _tesseract_python.Joint_parent_to_joint_origin_transform_set)
    dynamics = property(_tesseract_python.Joint_dynamics_get, _tesseract_python.Joint_dynamics_set)
    limits = property(_tesseract_python.Joint_limits_get, _tesseract_python.Joint_limits_set)
    safety = property(_tesseract_python.Joint_safety_get, _tesseract_python.Joint_safety_set)
    calibration = property(_tesseract_python.Joint_calibration_get, _tesseract_python.Joint_calibration_set)
    mimic = property(_tesseract_python.Joint_mimic_get, _tesseract_python.Joint_mimic_set)

    def clear(self) -> "void":
        return _tesseract_python.Joint_clear(self)
    __swig_destroy__ = _tesseract_python.delete_Joint

# Register Joint in _tesseract_python:
_tesseract_python.Joint_swigregister(Joint)

class tesseract_scene_graph_VisualVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_VisualVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_VisualVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_VisualVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::size_type":
        return _tesseract_python.tesseract_scene_graph_VisualVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual >,std::allocator< std::shared_ptr< tesseract_scene_graph::Visual > > > *":
        return _tesseract_python.tesseract_scene_graph_VisualVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_VisualVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type":
        return _tesseract_python.tesseract_scene_graph_VisualVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_VisualVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::size_type":
        return _tesseract_python.tesseract_scene_graph_VisualVector_size(self)

    def swap(self, v: "tesseract_scene_graph_VisualVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::iterator":
        return _tesseract_python.tesseract_scene_graph_VisualVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::iterator":
        return _tesseract_python.tesseract_scene_graph_VisualVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_VisualVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_VisualVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_VisualVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::iterator":
        return _tesseract_python.tesseract_scene_graph_VisualVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_VisualVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_VisualVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_VisualVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_VisualVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_VisualVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Visual > >::size_type":
        return _tesseract_python.tesseract_scene_graph_VisualVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_VisualVector

# Register tesseract_scene_graph_VisualVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_VisualVector_swigregister(tesseract_scene_graph_VisualVector)

class tesseract_scene_graph_CollisionVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::size_type":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision >,std::allocator< std::shared_ptr< tesseract_scene_graph::Collision > > > *":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::size_type":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_size(self)

    def swap(self, v: "tesseract_scene_graph_CollisionVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::iterator":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::iterator":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::iterator":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_CollisionVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_CollisionVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Collision > >::size_type":
        return _tesseract_python.tesseract_scene_graph_CollisionVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_CollisionVector

# Register tesseract_scene_graph_CollisionVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_CollisionVector_swigregister(tesseract_scene_graph_CollisionVector)

class Material(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string const &"):
        _tesseract_python.Material_swiginit(self, _tesseract_python.new_Material(name))

    def getName(self) -> "std::string const &":
        return _tesseract_python.Material_getName(self)
    texture_filename = property(_tesseract_python.Material_texture_filename_get, _tesseract_python.Material_texture_filename_set)
    color = property(_tesseract_python.Material_color_get, _tesseract_python.Material_color_set)

    def clear(self) -> "void":
        return _tesseract_python.Material_clear(self)
    __swig_destroy__ = _tesseract_python.delete_Material

# Register Material in _tesseract_python:
_tesseract_python.Material_swigregister(Material)

class Inertial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.Inertial_swiginit(self, _tesseract_python.new_Inertial())
    origin = property(_tesseract_python.Inertial_origin_get, _tesseract_python.Inertial_origin_set)
    mass = property(_tesseract_python.Inertial_mass_get, _tesseract_python.Inertial_mass_set)
    ixx = property(_tesseract_python.Inertial_ixx_get, _tesseract_python.Inertial_ixx_set)
    ixy = property(_tesseract_python.Inertial_ixy_get, _tesseract_python.Inertial_ixy_set)
    ixz = property(_tesseract_python.Inertial_ixz_get, _tesseract_python.Inertial_ixz_set)
    iyy = property(_tesseract_python.Inertial_iyy_get, _tesseract_python.Inertial_iyy_set)
    iyz = property(_tesseract_python.Inertial_iyz_get, _tesseract_python.Inertial_iyz_set)
    izz = property(_tesseract_python.Inertial_izz_get, _tesseract_python.Inertial_izz_set)

    def clear(self) -> "void":
        return _tesseract_python.Inertial_clear(self)
    __swig_destroy__ = _tesseract_python.delete_Inertial

# Register Inertial in _tesseract_python:
_tesseract_python.Inertial_swigregister(Inertial)

class Visual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.Visual_swiginit(self, _tesseract_python.new_Visual())
    origin = property(_tesseract_python.Visual_origin_get, _tesseract_python.Visual_origin_set)
    geometry = property(_tesseract_python.Visual_geometry_get, _tesseract_python.Visual_geometry_set)
    material = property(_tesseract_python.Visual_material_get, _tesseract_python.Visual_material_set)

    def clear(self) -> "void":
        return _tesseract_python.Visual_clear(self)
    name = property(_tesseract_python.Visual_name_get, _tesseract_python.Visual_name_set)
    __swig_destroy__ = _tesseract_python.delete_Visual

# Register Visual in _tesseract_python:
_tesseract_python.Visual_swigregister(Visual)

class Collision(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.Collision_swiginit(self, _tesseract_python.new_Collision())
    origin = property(_tesseract_python.Collision_origin_get, _tesseract_python.Collision_origin_set)
    geometry = property(_tesseract_python.Collision_geometry_get, _tesseract_python.Collision_geometry_set)

    def clear(self) -> "void":
        return _tesseract_python.Collision_clear(self)
    name = property(_tesseract_python.Collision_name_get, _tesseract_python.Collision_name_set)
    __swig_destroy__ = _tesseract_python.delete_Collision

# Register Collision in _tesseract_python:
_tesseract_python.Collision_swigregister(Collision)

class Link(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string"):
        _tesseract_python.Link_swiginit(self, _tesseract_python.new_Link(name))

    def getName(self) -> "std::string const &":
        return _tesseract_python.Link_getName(self)
    inertial = property(_tesseract_python.Link_inertial_get, _tesseract_python.Link_inertial_set)
    visual = property(_tesseract_python.Link_visual_get, _tesseract_python.Link_visual_set)
    collision = property(_tesseract_python.Link_collision_get, _tesseract_python.Link_collision_set)

    def clear(self) -> "void":
        return _tesseract_python.Link_clear(self)
    __swig_destroy__ = _tesseract_python.delete_Link

# Register Link in _tesseract_python:
_tesseract_python.Link_swigregister(Link)

class AllowedCollisionEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    link_name1 = property(_tesseract_python.AllowedCollisionEntry_link_name1_get, _tesseract_python.AllowedCollisionEntry_link_name1_set)
    link_name2 = property(_tesseract_python.AllowedCollisionEntry_link_name2_get, _tesseract_python.AllowedCollisionEntry_link_name2_set)
    reason = property(_tesseract_python.AllowedCollisionEntry_reason_get, _tesseract_python.AllowedCollisionEntry_reason_set)

    def __init__(self):
        _tesseract_python.AllowedCollisionEntry_swiginit(self, _tesseract_python.new_AllowedCollisionEntry())
    __swig_destroy__ = _tesseract_python.delete_AllowedCollisionEntry

# Register AllowedCollisionEntry in _tesseract_python:
_tesseract_python.AllowedCollisionEntry_swigregister(AllowedCollisionEntry)

class AllowedCollisionEntries(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.AllowedCollisionEntries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.AllowedCollisionEntries___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.AllowedCollisionEntries___bool__(self)

    def __len__(self) -> "std::vector< AllowedCollisionEntry >::size_type":
        return _tesseract_python.AllowedCollisionEntries___len__(self)

    def __getslice__(self, i: "std::vector< AllowedCollisionEntry >::difference_type", j: "std::vector< AllowedCollisionEntry >::difference_type") -> "std::vector< AllowedCollisionEntry,std::allocator< AllowedCollisionEntry > > *":
        return _tesseract_python.AllowedCollisionEntries___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionEntries___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< AllowedCollisionEntry >::difference_type", j: "std::vector< AllowedCollisionEntry >::difference_type") -> "void":
        return _tesseract_python.AllowedCollisionEntries___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionEntries___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< AllowedCollisionEntry >::value_type const &":
        return _tesseract_python.AllowedCollisionEntries___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionEntries___setitem__(self, *args)

    def pop(self) -> "std::vector< AllowedCollisionEntry >::value_type":
        return _tesseract_python.AllowedCollisionEntries_pop(self)

    def append(self, x: "AllowedCollisionEntry") -> "void":
        return _tesseract_python.AllowedCollisionEntries_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.AllowedCollisionEntries_empty(self)

    def size(self) -> "std::vector< AllowedCollisionEntry >::size_type":
        return _tesseract_python.AllowedCollisionEntries_size(self)

    def swap(self, v: "AllowedCollisionEntries") -> "void":
        return _tesseract_python.AllowedCollisionEntries_swap(self, v)

    def begin(self) -> "std::vector< AllowedCollisionEntry >::iterator":
        return _tesseract_python.AllowedCollisionEntries_begin(self)

    def end(self) -> "std::vector< AllowedCollisionEntry >::iterator":
        return _tesseract_python.AllowedCollisionEntries_end(self)

    def rbegin(self) -> "std::vector< AllowedCollisionEntry >::reverse_iterator":
        return _tesseract_python.AllowedCollisionEntries_rbegin(self)

    def rend(self) -> "std::vector< AllowedCollisionEntry >::reverse_iterator":
        return _tesseract_python.AllowedCollisionEntries_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.AllowedCollisionEntries_clear(self)

    def get_allocator(self) -> "std::vector< AllowedCollisionEntry >::allocator_type":
        return _tesseract_python.AllowedCollisionEntries_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.AllowedCollisionEntries_pop_back(self)

    def erase(self, *args) -> "std::vector< AllowedCollisionEntry >::iterator":
        return _tesseract_python.AllowedCollisionEntries_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.AllowedCollisionEntries_swiginit(self, _tesseract_python.new_AllowedCollisionEntries(*args))

    def push_back(self, x: "AllowedCollisionEntry") -> "void":
        return _tesseract_python.AllowedCollisionEntries_push_back(self, x)

    def front(self) -> "std::vector< AllowedCollisionEntry >::value_type const &":
        return _tesseract_python.AllowedCollisionEntries_front(self)

    def back(self) -> "std::vector< AllowedCollisionEntry >::value_type const &":
        return _tesseract_python.AllowedCollisionEntries_back(self)

    def assign(self, n: "std::vector< AllowedCollisionEntry >::size_type", x: "AllowedCollisionEntry") -> "void":
        return _tesseract_python.AllowedCollisionEntries_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionEntries_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionEntries_insert(self, *args)

    def reserve(self, n: "std::vector< AllowedCollisionEntry >::size_type") -> "void":
        return _tesseract_python.AllowedCollisionEntries_reserve(self, n)

    def capacity(self) -> "std::vector< AllowedCollisionEntry >::size_type":
        return _tesseract_python.AllowedCollisionEntries_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_AllowedCollisionEntries

# Register AllowedCollisionEntries in _tesseract_python:
_tesseract_python.AllowedCollisionEntries_swigregister(AllowedCollisionEntries)

class AllowedCollisionMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.AllowedCollisionMatrix_swiginit(self, _tesseract_python.new_AllowedCollisionMatrix())
    __swig_destroy__ = _tesseract_python.delete_AllowedCollisionMatrix

    def addAllowedCollision(self, link_name1: "std::string const &", link_name2: "std::string const &", reason: "std::string const &") -> "void":
        return _tesseract_python.AllowedCollisionMatrix_addAllowedCollision(self, link_name1, link_name2, reason)

    def getAllAllowedCollisions(self) -> "std::vector< AllowedCollisionEntry,std::allocator< AllowedCollisionEntry > >":
        return _tesseract_python.AllowedCollisionMatrix_getAllAllowedCollisions(self)

    def removeAllowedCollision(self, *args) -> "void":
        return _tesseract_python.AllowedCollisionMatrix_removeAllowedCollision(self, *args)

    def isCollisionAllowed(self, link_name1: "std::string const &", link_name2: "std::string const &") -> "bool":
        return _tesseract_python.AllowedCollisionMatrix_isCollisionAllowed(self, link_name1, link_name2)

    def clearAllowedCollisions(self) -> "void":
        return _tesseract_python.AllowedCollisionMatrix_clearAllowedCollisions(self)

# Register AllowedCollisionMatrix in _tesseract_python:
_tesseract_python.AllowedCollisionMatrix_swigregister(AllowedCollisionMatrix)

class tesseract_scene_graph_LinkVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_LinkVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link > > > *":
        return _tesseract_python.tesseract_scene_graph_LinkVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type":
        return _tesseract_python.tesseract_scene_graph_LinkVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkVector_size(self)

    def swap(self, v: "tesseract_scene_graph_LinkVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_LinkVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_LinkVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_LinkVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_LinkVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_LinkVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_LinkVector

# Register tesseract_scene_graph_LinkVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_LinkVector_swigregister(tesseract_scene_graph_LinkVector)

class tesseract_scene_graph_JointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_JointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint > > > *":
        return _tesseract_python.tesseract_scene_graph_JointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type":
        return _tesseract_python.tesseract_scene_graph_JointVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointVector_size(self)

    def swap(self, v: "tesseract_scene_graph_JointVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_JointVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_JointVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_JointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_JointVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_JointVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_JointVector

# Register tesseract_scene_graph_JointVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_JointVector_swigregister(tesseract_scene_graph_JointVector)

class tesseract_scene_graph_LinkConstVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Link const > > > *":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_size(self)

    def swap(self, v: "tesseract_scene_graph_LinkConstVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_LinkConstVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_LinkConstVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Link const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_LinkConstVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_LinkConstVector

# Register tesseract_scene_graph_LinkConstVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_LinkConstVector_swigregister(tesseract_scene_graph_LinkConstVector)

class tesseract_scene_graph_JointConstVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const >,std::allocator< std::shared_ptr< tesseract_scene_graph::Joint const > > > *":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::difference_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_size(self)

    def swap(self, v: "tesseract_scene_graph_JointConstVector") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::reverse_iterator":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::allocator_type":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::iterator":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.tesseract_scene_graph_JointConstVector_swiginit(self, _tesseract_python.new_tesseract_scene_graph_JointConstVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::size_type", x: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::value_type const &") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::size_type") -> "void":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_scene_graph::Joint const > >::size_type":
        return _tesseract_python.tesseract_scene_graph_JointConstVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_tesseract_scene_graph_JointConstVector

# Register tesseract_scene_graph_JointConstVector in _tesseract_python:
_tesseract_python.tesseract_scene_graph_JointConstVector_swigregister(tesseract_scene_graph_JointConstVector)

class SceneGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.SceneGraph_swiginit(self, _tesseract_python.new_SceneGraph())

    def setName(self, name: "std::string const &") -> "void":
        return _tesseract_python.SceneGraph_setName(self, name)

    def getName(self) -> "std::string const &":
        return _tesseract_python.SceneGraph_getName(self)

    def setRoot(self, name: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_setRoot(self, name)

    def getRoot(self) -> "std::string const &":
        return _tesseract_python.SceneGraph_getRoot(self)

    def getLink(self, name: "std::string const &") -> "tesseract_scene_graph::Link::ConstPtr":
        return _tesseract_python.SceneGraph_getLink(self, name)

    def getLinks(self) -> "std::vector< tesseract_scene_graph::Link::ConstPtr,std::allocator< tesseract_scene_graph::Link::ConstPtr > >":
        return _tesseract_python.SceneGraph_getLinks(self)

    def removeLink(self, name: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_removeLink(self, name)

    def setLinkVisibility(self, name: "std::string const &", visibility: "bool") -> "void":
        return _tesseract_python.SceneGraph_setLinkVisibility(self, name, visibility)

    def getLinkVisibility(self, name: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_getLinkVisibility(self, name)

    def setLinkCollisionEnabled(self, name: "std::string const &", enabled: "bool") -> "void":
        return _tesseract_python.SceneGraph_setLinkCollisionEnabled(self, name, enabled)

    def getLinkCollisionEnabled(self, name: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_getLinkCollisionEnabled(self, name)

    def getJoint(self, name: "std::string const &") -> "tesseract_scene_graph::Joint::ConstPtr":
        return _tesseract_python.SceneGraph_getJoint(self, name)

    def removeJoint(self, name: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_removeJoint(self, name)

    def moveJoint(self, name: "std::string const &", parent_link: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_moveJoint(self, name, parent_link)

    def getJoints(self) -> "std::vector< tesseract_scene_graph::Joint::ConstPtr,std::allocator< tesseract_scene_graph::Joint::ConstPtr > >":
        return _tesseract_python.SceneGraph_getJoints(self)

    def changeJointOrigin(self, name: "std::string const &", new_origin: "Eigen::Isometry3d const &") -> "bool":
        return _tesseract_python.SceneGraph_changeJointOrigin(self, name, new_origin)

    def addAllowedCollision(self, link_name1: "std::string const &", link_name2: "std::string const &", reason: "std::string const &") -> "void":
        return _tesseract_python.SceneGraph_addAllowedCollision(self, link_name1, link_name2, reason)

    def removeAllowedCollision(self, *args) -> "void":
        return _tesseract_python.SceneGraph_removeAllowedCollision(self, *args)

    def clearAllowedCollisions(self) -> "void":
        return _tesseract_python.SceneGraph_clearAllowedCollisions(self)

    def isCollisionAllowed(self, link_name1: "std::string const &", link_name2: "std::string const &") -> "bool":
        return _tesseract_python.SceneGraph_isCollisionAllowed(self, link_name1, link_name2)

    def getAllowedCollisionMatrix(self) -> "tesseract_scene_graph::AllowedCollisionMatrix::ConstPtr":
        return _tesseract_python.SceneGraph_getAllowedCollisionMatrix(self)

    def getSourceLink(self, joint_name: "std::string const &") -> "tesseract_scene_graph::Link::ConstPtr":
        return _tesseract_python.SceneGraph_getSourceLink(self, joint_name)

    def getTargetLink(self, joint_name: "std::string const &") -> "tesseract_scene_graph::Link::ConstPtr":
        return _tesseract_python.SceneGraph_getTargetLink(self, joint_name)

    def getInboundJoints(self, link_name: "std::string const &") -> "std::vector< tesseract_scene_graph::Joint::ConstPtr,std::allocator< tesseract_scene_graph::Joint::ConstPtr > >":
        return _tesseract_python.SceneGraph_getInboundJoints(self, link_name)

    def getOutboundJoints(self, link_name: "std::string const &") -> "std::vector< tesseract_scene_graph::Joint::ConstPtr,std::allocator< tesseract_scene_graph::Joint::ConstPtr > >":
        return _tesseract_python.SceneGraph_getOutboundJoints(self, link_name)

    def isAcyclic(self) -> "bool":
        return _tesseract_python.SceneGraph_isAcyclic(self)

    def isTree(self) -> "bool":
        return _tesseract_python.SceneGraph_isTree(self)

    def getAdjacentLinkNames(self, name: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.SceneGraph_getAdjacentLinkNames(self, name)

    def getInvAdjacentLinkNames(self, name: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.SceneGraph_getInvAdjacentLinkNames(self, name)

    def getLinkChildrenNames(self, name: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.SceneGraph_getLinkChildrenNames(self, name)

    def getJointChildrenNames(self, name: "std::string const &") -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.SceneGraph_getJointChildrenNames(self, name)

    def saveDOT(self, path: "std::string const &") -> "void":
        return _tesseract_python.SceneGraph_saveDOT(self, path)

    def addLink(self, link: "tesseract_scene_graph::Link::ConstPtr") -> "bool":
        return _tesseract_python.SceneGraph_addLink(self, link)

    def addJoint(self, joint: "tesseract_scene_graph::Joint::ConstPtr") -> "bool":
        return _tesseract_python.SceneGraph_addJoint(self, joint)
    __swig_destroy__ = _tesseract_python.delete_SceneGraph

# Register SceneGraph in _tesseract_python:
_tesseract_python.SceneGraph_swigregister(SceneGraph)

class ResourceLocator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_ResourceLocator

    def locateResource(self, url: "std::string const &") -> "tesseract_common::Resource::Ptr":
        return _tesseract_python.ResourceLocator_locateResource(self, url)

    def __init__(self):
        if self.__class__ == ResourceLocator:
            _self = None
        else:
            _self = self
        _tesseract_python.ResourceLocator_swiginit(self, _tesseract_python.new_ResourceLocator(_self, ))
    def __disown__(self):
        self.this.disown()
        _tesseract_python.disown_ResourceLocator(self)
        return weakref.proxy(self)

# Register ResourceLocator in _tesseract_python:
_tesseract_python.ResourceLocator_swigregister(ResourceLocator)

class map_string_isometry3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_isometry3d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_isometry3d___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_isometry3d___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,Eigen::Isometry3d >::size_type":
        return _tesseract_python.map_string_isometry3d___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "std::unordered_map< std::string,Eigen::Isometry3d >::mapped_type const &":
        return _tesseract_python.map_string_isometry3d___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "void":
        return _tesseract_python.map_string_isometry3d___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "bool":
        return _tesseract_python.map_string_isometry3d_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_isometry3d_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_isometry3d_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_isometry3d_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "bool":
        return _tesseract_python.map_string_isometry3d___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_isometry3d_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_isometry3d_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_isometry3d___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_isometry3d_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_isometry3d_swiginit(self, _tesseract_python.new_map_string_isometry3d(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_isometry3d_empty(self)

    def size(self) -> "std::unordered_map< std::string,Eigen::Isometry3d >::size_type":
        return _tesseract_python.map_string_isometry3d_size(self)

    def swap(self, v: "map_string_isometry3d") -> "void":
        return _tesseract_python.map_string_isometry3d_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,Eigen::Isometry3d >::iterator":
        return _tesseract_python.map_string_isometry3d_begin(self)

    def end(self) -> "std::unordered_map< std::string,Eigen::Isometry3d >::iterator":
        return _tesseract_python.map_string_isometry3d_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_isometry3d_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,Eigen::Isometry3d >::allocator_type":
        return _tesseract_python.map_string_isometry3d_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "std::unordered_map< std::string,Eigen::Isometry3d >::size_type":
        return _tesseract_python.map_string_isometry3d_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_isometry3d_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,Eigen::Isometry3d >::key_type const &") -> "std::unordered_map< std::string,Eigen::Isometry3d >::iterator":
        return _tesseract_python.map_string_isometry3d_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_isometry3d

# Register map_string_isometry3d in _tesseract_python:
_tesseract_python.map_string_isometry3d_swigregister(map_string_isometry3d)

class map_string_opwkinparams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_opwkinparams_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.map_string_opwkinparams___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.map_string_opwkinparams___bool__(self)

    def __len__(self) -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::size_type":
        return _tesseract_python.map_string_opwkinparams___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::mapped_type const &":
        return _tesseract_python.map_string_opwkinparams___getitem__(self, key)

    def __delitem__(self, key: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "void":
        return _tesseract_python.map_string_opwkinparams___delitem__(self, key)

    def has_key(self, key: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "bool":
        return _tesseract_python.map_string_opwkinparams_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.map_string_opwkinparams_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.map_string_opwkinparams_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.map_string_opwkinparams_items(self)

    def __contains__(self, key: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "bool":
        return _tesseract_python.map_string_opwkinparams___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_opwkinparams_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.map_string_opwkinparams_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.map_string_opwkinparams___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.map_string_opwkinparams_asdict(self)

    def __init__(self, *args):
        _tesseract_python.map_string_opwkinparams_swiginit(self, _tesseract_python.new_map_string_opwkinparams(*args))

    def empty(self) -> "bool":
        return _tesseract_python.map_string_opwkinparams_empty(self)

    def size(self) -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::size_type":
        return _tesseract_python.map_string_opwkinparams_size(self)

    def swap(self, v: "map_string_opwkinparams") -> "void":
        return _tesseract_python.map_string_opwkinparams_swap(self, v)

    def begin(self) -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::iterator":
        return _tesseract_python.map_string_opwkinparams_begin(self)

    def end(self) -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::iterator":
        return _tesseract_python.map_string_opwkinparams_end(self)

    def clear(self) -> "void":
        return _tesseract_python.map_string_opwkinparams_clear(self)

    def get_allocator(self) -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::allocator_type":
        return _tesseract_python.map_string_opwkinparams_get_allocator(self)

    def count(self, x: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::size_type":
        return _tesseract_python.map_string_opwkinparams_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.map_string_opwkinparams_erase(self, *args)

    def find(self, x: "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::key_type const &") -> "std::unordered_map< std::string,tesseract_scene_graph::OPWKinematicParameters >::iterator":
        return _tesseract_python.map_string_opwkinparams_find(self, x)
    __swig_destroy__ = _tesseract_python.delete_map_string_opwkinparams

# Register map_string_opwkinparams in _tesseract_python:
_tesseract_python.map_string_opwkinparams_swigregister(map_string_opwkinparams)

class OPWKinematicParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a1 = property(_tesseract_python.OPWKinematicParameters_a1_get, _tesseract_python.OPWKinematicParameters_a1_set)
    a2 = property(_tesseract_python.OPWKinematicParameters_a2_get, _tesseract_python.OPWKinematicParameters_a2_set)
    b = property(_tesseract_python.OPWKinematicParameters_b_get, _tesseract_python.OPWKinematicParameters_b_set)
    c1 = property(_tesseract_python.OPWKinematicParameters_c1_get, _tesseract_python.OPWKinematicParameters_c1_set)
    c2 = property(_tesseract_python.OPWKinematicParameters_c2_get, _tesseract_python.OPWKinematicParameters_c2_set)
    c3 = property(_tesseract_python.OPWKinematicParameters_c3_get, _tesseract_python.OPWKinematicParameters_c3_set)
    c4 = property(_tesseract_python.OPWKinematicParameters_c4_get, _tesseract_python.OPWKinematicParameters_c4_set)
    offsets = property(_tesseract_python.OPWKinematicParameters_offsets_get, _tesseract_python.OPWKinematicParameters_offsets_set)
    sign_corrections = property(_tesseract_python.OPWKinematicParameters_sign_corrections_get, _tesseract_python.OPWKinematicParameters_sign_corrections_set)

    def __init__(self):
        _tesseract_python.OPWKinematicParameters_swiginit(self, _tesseract_python.new_OPWKinematicParameters())
    __swig_destroy__ = _tesseract_python.delete_OPWKinematicParameters

# Register OPWKinematicParameters in _tesseract_python:
_tesseract_python.OPWKinematicParameters_swigregister(OPWKinematicParameters)

class SRDFModel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def initXml(self, *args) -> "bool":
        return _tesseract_python.SRDFModel_initXml(self, *args)

    def initFile(self, scene_graph: "SceneGraph", filename: "std::string const &") -> "bool":
        return _tesseract_python.SRDFModel_initFile(self, scene_graph, filename)

    def initString(self, scene_graph: "SceneGraph", xmlstring: "std::string const &") -> "bool":
        return _tesseract_python.SRDFModel_initString(self, scene_graph, xmlstring)

    def saveToFile(self, file_path: "std::string const &") -> "bool":
        return _tesseract_python.SRDFModel_saveToFile(self, file_path)

    def getName(self, *args) -> "std::string":
        return _tesseract_python.SRDFModel_getName(self, *args)

    def getAllowedCollisionMatrix(self, *args) -> "tesseract_scene_graph::AllowedCollisionMatrix &":
        return _tesseract_python.SRDFModel_getAllowedCollisionMatrix(self, *args)

    def getChainGroups(self, *args) -> "tesseract_scene_graph::ChainGroups &":
        return _tesseract_python.SRDFModel_getChainGroups(self, *args)

    def getJointGroups(self, *args) -> "tesseract_scene_graph::JointGroups &":
        return _tesseract_python.SRDFModel_getJointGroups(self, *args)

    def getLinkGroups(self, *args) -> "tesseract_scene_graph::LinkGroups &":
        return _tesseract_python.SRDFModel_getLinkGroups(self, *args)

    def getGroupTCPs(self, *args) -> "tesseract_scene_graph::GroupTCPs &":
        return _tesseract_python.SRDFModel_getGroupTCPs(self, *args)

    def getGroupStates(self, *args) -> "tesseract_scene_graph::GroupStates &":
        return _tesseract_python.SRDFModel_getGroupStates(self, *args)

    def getGroupOPWKinematics(self, *args) -> "tesseract_scene_graph::GroupOPWKinematics &":
        return _tesseract_python.SRDFModel_getGroupOPWKinematics(self, *args)

    def clear(self) -> "void":
        return _tesseract_python.SRDFModel_clear(self)

    def __init__(self):
        _tesseract_python.SRDFModel_swiginit(self, _tesseract_python.new_SRDFModel())
    __swig_destroy__ = _tesseract_python.delete_SRDFModel

# Register SRDFModel in _tesseract_python:
_tesseract_python.SRDFModel_swigregister(SRDFModel)

class ForwardKinematics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_ForwardKinematics

    def calcFwdKin2(self, joint_angles: "Eigen::Ref< Eigen::VectorXd const > const &") -> "tesseract_common::VectorIsometry3d":
        return _tesseract_python.ForwardKinematics_calcFwdKin2(self, joint_angles)

    def calcFwdKin(self, *args) -> "Eigen::Isometry3d":
        return _tesseract_python.ForwardKinematics_calcFwdKin(self, *args)

    def calcJacobian(self, *args) -> "Eigen::MatrixXd":
        return _tesseract_python.ForwardKinematics_calcJacobian(self, *args)

    def checkJoints(self, vec: "Eigen::Ref< Eigen::VectorXd const > const &") -> "bool":
        return _tesseract_python.ForwardKinematics_checkJoints(self, vec)

    def getJointNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _tesseract_python.ForwardKinematics_getJointNames(self)

    def getLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _tesseract_python.ForwardKinematics_getLinkNames(self)

    def getActiveLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _tesseract_python.ForwardKinematics_getActiveLinkNames(self)

    def getLimits(self) -> "Eigen::MatrixX2d const &":
        return _tesseract_python.ForwardKinematics_getLimits(self)

    def numJoints(self) -> "unsigned int":
        return _tesseract_python.ForwardKinematics_numJoints(self)

    def getBaseLinkName(self) -> "std::string const &":
        return _tesseract_python.ForwardKinematics_getBaseLinkName(self)

    def getTipLinkName(self) -> "std::string const &":
        return _tesseract_python.ForwardKinematics_getTipLinkName(self)

    def getName(self) -> "std::string const &":
        return _tesseract_python.ForwardKinematics_getName(self)

    def getSolverName(self) -> "std::string const &":
        return _tesseract_python.ForwardKinematics_getSolverName(self)

    def clone(self) -> "std::shared_ptr< tesseract_kinematics::ForwardKinematics >":
        return _tesseract_python.ForwardKinematics_clone(self)

# Register ForwardKinematics in _tesseract_python:
_tesseract_python.ForwardKinematics_swigregister(ForwardKinematics)

ForwardKinematicsFactoryType_CHAIN = _tesseract_python.ForwardKinematicsFactoryType_CHAIN
ForwardKinematicsFactoryType_TREE = _tesseract_python.ForwardKinematicsFactoryType_TREE
ForwardKinematicsFactoryType_GRAPH = _tesseract_python.ForwardKinematicsFactoryType_GRAPH
class ForwardKinematicsFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_ForwardKinematicsFactory

    def getName(self) -> "std::string const &":
        return _tesseract_python.ForwardKinematicsFactory_getName(self)

    def getType(self) -> "tesseract_kinematics::ForwardKinematicsFactoryType":
        return _tesseract_python.ForwardKinematicsFactory_getType(self)

    def create(self, *args) -> "tesseract_kinematics::ForwardKinematics::Ptr":
        return _tesseract_python.ForwardKinematicsFactory_create(self, *args)

# Register ForwardKinematicsFactory in _tesseract_python:
_tesseract_python.ForwardKinematicsFactory_swigregister(ForwardKinematicsFactory)

class InverseKinematics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_InverseKinematics

    def calcInvKin(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.InverseKinematics_calcInvKin(self, *args)

    def checkJoints(self, vec: "Eigen::Ref< Eigen::VectorXd const > const &") -> "bool":
        return _tesseract_python.InverseKinematics_checkJoints(self, vec)

    def getJointNames(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.InverseKinematics_getJointNames(self)

    def getLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.InverseKinematics_getLinkNames(self)

    def getActiveLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.InverseKinematics_getActiveLinkNames(self)

    def getLimits(self) -> "Eigen::MatrixX2d const":
        return _tesseract_python.InverseKinematics_getLimits(self)

    def numJoints(self) -> "unsigned int":
        return _tesseract_python.InverseKinematics_numJoints(self)

    def getBaseLinkName(self) -> "std::string const":
        return _tesseract_python.InverseKinematics_getBaseLinkName(self)

    def getTipLinkName(self) -> "std::string const":
        return _tesseract_python.InverseKinematics_getTipLinkName(self)

    def getName(self) -> "std::string const":
        return _tesseract_python.InverseKinematics_getName(self)

    def getSolverName(self) -> "std::string const":
        return _tesseract_python.InverseKinematics_getSolverName(self)

    def clone(self) -> "std::shared_ptr< tesseract_kinematics::InverseKinematics >":
        return _tesseract_python.InverseKinematics_clone(self)

# Register InverseKinematics in _tesseract_python:
_tesseract_python.InverseKinematics_swigregister(InverseKinematics)

InverseKinematicsFactoryType_CHAIN = _tesseract_python.InverseKinematicsFactoryType_CHAIN
InverseKinematicsFactoryType_TREE = _tesseract_python.InverseKinematicsFactoryType_TREE
InverseKinematicsFactoryType_GRAPH = _tesseract_python.InverseKinematicsFactoryType_GRAPH
class InverseKinematicsFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_InverseKinematicsFactory

    def getName(self) -> "std::string const &":
        return _tesseract_python.InverseKinematicsFactory_getName(self)

    def getType(self) -> "tesseract_kinematics::InverseKinematicsFactoryType":
        return _tesseract_python.InverseKinematicsFactory_getType(self)

    def create(self, *args) -> "tesseract_kinematics::InverseKinematics::Ptr":
        return _tesseract_python.InverseKinematicsFactory_create(self, *args)

# Register InverseKinematicsFactory in _tesseract_python:
_tesseract_python.InverseKinematicsFactory_swigregister(InverseKinematicsFactory)

ContinuousCollisionType_CCType_None = _tesseract_python.ContinuousCollisionType_CCType_None
ContinuousCollisionType_CCType_Time0 = _tesseract_python.ContinuousCollisionType_CCType_Time0
ContinuousCollisionType_CCType_Time1 = _tesseract_python.ContinuousCollisionType_CCType_Time1
ContinuousCollisionType_CCType_Between = _tesseract_python.ContinuousCollisionType_CCType_Between
ContactTestType_FIRST = _tesseract_python.ContactTestType_FIRST
ContactTestType_CLOSEST = _tesseract_python.ContactTestType_CLOSEST
ContactTestType_ALL = _tesseract_python.ContactTestType_ALL
ContactTestType_LIMITED = _tesseract_python.ContactTestType_LIMITED
class ContactResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_tesseract_python.ContactResult_distance_get, _tesseract_python.ContactResult_distance_set)
    type_id = property(_tesseract_python.ContactResult_type_id_get, _tesseract_python.ContactResult_type_id_set)
    link_names = property(_tesseract_python.ContactResult_link_names_get, _tesseract_python.ContactResult_link_names_set)
    shape_id = property(_tesseract_python.ContactResult_shape_id_get, _tesseract_python.ContactResult_shape_id_set)
    subshape_id = property(_tesseract_python.ContactResult_subshape_id_get, _tesseract_python.ContactResult_subshape_id_set)
    nearest_points = property(_tesseract_python.ContactResult_nearest_points_get, _tesseract_python.ContactResult_nearest_points_set)
    nearest_points_local = property(_tesseract_python.ContactResult_nearest_points_local_get, _tesseract_python.ContactResult_nearest_points_local_set)
    transform = property(_tesseract_python.ContactResult_transform_get, _tesseract_python.ContactResult_transform_set)
    normal = property(_tesseract_python.ContactResult_normal_get, _tesseract_python.ContactResult_normal_set)
    cc_time = property(_tesseract_python.ContactResult_cc_time_get, _tesseract_python.ContactResult_cc_time_set)
    cc_transform = property(_tesseract_python.ContactResult_cc_transform_get, _tesseract_python.ContactResult_cc_transform_set)

    def __init__(self):
        _tesseract_python.ContactResult_swiginit(self, _tesseract_python.new_ContactResult())

    def clear(self) -> "void":
        return _tesseract_python.ContactResult_clear(self)
    __swig_destroy__ = _tesseract_python.delete_ContactResult

# Register ContactResult in _tesseract_python:
_tesseract_python.ContactResult_swigregister(ContactResult)


def flattenResults(m: "ContactResultMap") -> "tesseract_collision::ContactResultVector":
    return _tesseract_python.flattenResults(m)
class ContactResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.ContactResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.ContactResultVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.ContactResultVector___bool__(self)

    def __len__(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::size_type":
        return _tesseract_python.ContactResultVector___len__(self)

    def __getslice__(self, i: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::difference_type", j: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::difference_type") -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > *":
        return _tesseract_python.ContactResultVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.ContactResultVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::difference_type", j: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::difference_type") -> "void":
        return _tesseract_python.ContactResultVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.ContactResultVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::value_type const &":
        return _tesseract_python.ContactResultVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.ContactResultVector___setitem__(self, *args)

    def pop(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::value_type":
        return _tesseract_python.ContactResultVector_pop(self)

    def append(self, x: "ContactResult") -> "void":
        return _tesseract_python.ContactResultVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.ContactResultVector_empty(self)

    def size(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::size_type":
        return _tesseract_python.ContactResultVector_size(self)

    def swap(self, v: "ContactResultVector") -> "void":
        return _tesseract_python.ContactResultVector_swap(self, v)

    def begin(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::iterator":
        return _tesseract_python.ContactResultVector_begin(self)

    def end(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::iterator":
        return _tesseract_python.ContactResultVector_end(self)

    def rbegin(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::reverse_iterator":
        return _tesseract_python.ContactResultVector_rbegin(self)

    def rend(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::reverse_iterator":
        return _tesseract_python.ContactResultVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.ContactResultVector_clear(self)

    def get_allocator(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::allocator_type":
        return _tesseract_python.ContactResultVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.ContactResultVector_pop_back(self)

    def erase(self, *args) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::iterator":
        return _tesseract_python.ContactResultVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.ContactResultVector_swiginit(self, _tesseract_python.new_ContactResultVector(*args))

    def push_back(self, x: "ContactResult") -> "void":
        return _tesseract_python.ContactResultVector_push_back(self, x)

    def front(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::value_type const &":
        return _tesseract_python.ContactResultVector_front(self)

    def back(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::value_type const &":
        return _tesseract_python.ContactResultVector_back(self)

    def assign(self, n: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::size_type", x: "ContactResult") -> "void":
        return _tesseract_python.ContactResultVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.ContactResultVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.ContactResultVector_insert(self, *args)

    def reserve(self, n: "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::size_type") -> "void":
        return _tesseract_python.ContactResultVector_reserve(self, n)

    def capacity(self) -> "std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >::size_type":
        return _tesseract_python.ContactResultVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_ContactResultVector

# Register ContactResultVector in _tesseract_python:
_tesseract_python.ContactResultVector_swigregister(ContactResultVector)

class ContactResultMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.ContactResultMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.ContactResultMap___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.ContactResultMap___bool__(self)

    def __len__(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::size_type":
        return _tesseract_python.ContactResultMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: "pair_string") -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::mapped_type const &":
        return _tesseract_python.ContactResultMap___getitem__(self, key)

    def __delitem__(self, key: "pair_string") -> "void":
        return _tesseract_python.ContactResultMap___delitem__(self, key)

    def has_key(self, key: "pair_string") -> "bool":
        return _tesseract_python.ContactResultMap_has_key(self, key)

    def keys(self) -> "PyObject *":
        return _tesseract_python.ContactResultMap_keys(self)

    def values(self) -> "PyObject *":
        return _tesseract_python.ContactResultMap_values(self)

    def items(self) -> "PyObject *":
        return _tesseract_python.ContactResultMap_items(self)

    def __contains__(self, key: "pair_string") -> "bool":
        return _tesseract_python.ContactResultMap___contains__(self, key)

    def key_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.ContactResultMap_key_iterator(self)

    def value_iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.ContactResultMap_value_iterator(self)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.ContactResultMap___setitem__(self, *args)

    def asdict(self) -> "PyObject *":
        return _tesseract_python.ContactResultMap_asdict(self)

    def __init__(self, *args):
        _tesseract_python.ContactResultMap_swiginit(self, _tesseract_python.new_ContactResultMap(*args))

    def empty(self) -> "bool":
        return _tesseract_python.ContactResultMap_empty(self)

    def size(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::size_type":
        return _tesseract_python.ContactResultMap_size(self)

    def swap(self, v: "ContactResultMap") -> "void":
        return _tesseract_python.ContactResultMap_swap(self, v)

    def begin(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::iterator":
        return _tesseract_python.ContactResultMap_begin(self)

    def end(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::iterator":
        return _tesseract_python.ContactResultMap_end(self)

    def rbegin(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::reverse_iterator":
        return _tesseract_python.ContactResultMap_rbegin(self)

    def rend(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::reverse_iterator":
        return _tesseract_python.ContactResultMap_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.ContactResultMap_clear(self)

    def get_allocator(self) -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::allocator_type":
        return _tesseract_python.ContactResultMap_get_allocator(self)

    def count(self, x: "pair_string") -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::size_type":
        return _tesseract_python.ContactResultMap_count(self, x)

    def erase(self, *args) -> "void":
        return _tesseract_python.ContactResultMap_erase(self, *args)

    def find(self, x: "pair_string") -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::iterator":
        return _tesseract_python.ContactResultMap_find(self, x)

    def lower_bound(self, x: "pair_string") -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::iterator":
        return _tesseract_python.ContactResultMap_lower_bound(self, x)

    def upper_bound(self, x: "pair_string") -> "std::map< std::pair< std::string,std::string >,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > >,std::less< std::pair< std::string,std::string > >,Eigen::aligned_allocator< std::pair< std::pair< std::string,std::string > const,std::vector< tesseract_collision::ContactResult,Eigen::aligned_allocator< tesseract_collision::ContactResult > > > > >::iterator":
        return _tesseract_python.ContactResultMap_upper_bound(self, x)
    __swig_destroy__ = _tesseract_python.delete_ContactResultMap

# Register ContactResultMap in _tesseract_python:
_tesseract_python.ContactResultMap_swigregister(ContactResultMap)

class DiscreteContactManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_DiscreteContactManager

    def clone(self) -> "std::shared_ptr< tesseract_collision::DiscreteContactManager >":
        return _tesseract_python.DiscreteContactManager_clone(self)

    def addCollisionObject(self, name: "std::string const &", mask_id: "int const &", shapes: "tesseract_geometry_GeometriesConst", shape_poses: "tesseract_common::VectorIsometry3d const &", enabled: "bool"=True) -> "bool":
        return _tesseract_python.DiscreteContactManager_addCollisionObject(self, name, mask_id, shapes, shape_poses, enabled)

    def getCollisionObjectGeometries(self, name: "std::string const &") -> "tesseract_collision::CollisionShapesConst const &":
        return _tesseract_python.DiscreteContactManager_getCollisionObjectGeometries(self, name)

    def getCollisionObjectGeometriesTransforms(self, name: "std::string const &") -> "tesseract_common::VectorIsometry3d const &":
        return _tesseract_python.DiscreteContactManager_getCollisionObjectGeometriesTransforms(self, name)

    def hasCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.DiscreteContactManager_hasCollisionObject(self, name)

    def removeCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.DiscreteContactManager_removeCollisionObject(self, name)

    def enableCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.DiscreteContactManager_enableCollisionObject(self, name)

    def disableCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.DiscreteContactManager_disableCollisionObject(self, name)

    def setCollisionObjectsTransform(self, *args) -> "void":
        return _tesseract_python.DiscreteContactManager_setCollisionObjectsTransform(self, *args)

    def setActiveCollisionObjects(self, names: "vector_string") -> "void":
        return _tesseract_python.DiscreteContactManager_setActiveCollisionObjects(self, names)

    def getActiveCollisionObjects(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.DiscreteContactManager_getActiveCollisionObjects(self)

    def setContactDistanceThreshold(self, contact_distance: "double") -> "void":
        return _tesseract_python.DiscreteContactManager_setContactDistanceThreshold(self, contact_distance)

    def getContactDistanceThreshold(self) -> "double":
        return _tesseract_python.DiscreteContactManager_getContactDistanceThreshold(self)

    def contactTest(self, type: "tesseract_collision::ContactTestType const &") -> "tesseract_collision::ContactResultMap":
        return _tesseract_python.DiscreteContactManager_contactTest(self, type)

# Register DiscreteContactManager in _tesseract_python:
_tesseract_python.DiscreteContactManager_swigregister(DiscreteContactManager)

class DiscreteContactManagerFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.DiscreteContactManagerFactory_swiginit(self, _tesseract_python.new_DiscreteContactManagerFactory())

    def create(self, name: "std::string const &") -> "tesseract_collision::DiscreteContactManager::Ptr":
        return _tesseract_python.DiscreteContactManagerFactory_create(self, name)
    __swig_destroy__ = _tesseract_python.delete_DiscreteContactManagerFactory

# Register DiscreteContactManagerFactory in _tesseract_python:
_tesseract_python.DiscreteContactManagerFactory_swigregister(DiscreteContactManagerFactory)

class ContinuousContactManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_ContinuousContactManager

    def clone(self) -> "std::shared_ptr< tesseract_collision::ContinuousContactManager >":
        return _tesseract_python.ContinuousContactManager_clone(self)

    def addCollisionObject(self, name: "std::string const &", mask_id: "int const &", shapes: "tesseract_geometry_GeometriesConst", shape_poses: "tesseract_common::VectorIsometry3d const &", enabled: "bool"=True) -> "bool":
        return _tesseract_python.ContinuousContactManager_addCollisionObject(self, name, mask_id, shapes, shape_poses, enabled)

    def getCollisionObjectGeometries(self, name: "std::string const &") -> "tesseract_collision::CollisionShapesConst const &":
        return _tesseract_python.ContinuousContactManager_getCollisionObjectGeometries(self, name)

    def getCollisionObjectGeometriesTransforms(self, name: "std::string const &") -> "tesseract_common::VectorIsometry3d const &":
        return _tesseract_python.ContinuousContactManager_getCollisionObjectGeometriesTransforms(self, name)

    def hasCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.ContinuousContactManager_hasCollisionObject(self, name)

    def removeCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.ContinuousContactManager_removeCollisionObject(self, name)

    def enableCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.ContinuousContactManager_enableCollisionObject(self, name)

    def disableCollisionObject(self, name: "std::string const &") -> "bool":
        return _tesseract_python.ContinuousContactManager_disableCollisionObject(self, name)

    def setCollisionObjectsTransform(self, *args) -> "void":
        return _tesseract_python.ContinuousContactManager_setCollisionObjectsTransform(self, *args)

    def setActiveCollisionObjects(self, names: "vector_string") -> "void":
        return _tesseract_python.ContinuousContactManager_setActiveCollisionObjects(self, names)

    def getActiveCollisionObjects(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.ContinuousContactManager_getActiveCollisionObjects(self)

    def setContactDistanceThreshold(self, contact_distance: "double") -> "void":
        return _tesseract_python.ContinuousContactManager_setContactDistanceThreshold(self, contact_distance)

    def getContactDistanceThreshold(self) -> "double":
        return _tesseract_python.ContinuousContactManager_getContactDistanceThreshold(self)

    def contactTest(self, type: "tesseract_collision::ContactTestType const &") -> "tesseract_collision::ContactResultMap":
        return _tesseract_python.ContinuousContactManager_contactTest(self, type)

# Register ContinuousContactManager in _tesseract_python:
_tesseract_python.ContinuousContactManager_swigregister(ContinuousContactManager)

class ContinuousContactManagerFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.ContinuousContactManagerFactory_swiginit(self, _tesseract_python.new_ContinuousContactManagerFactory())

    def create(self, name: "std::string const &") -> "tesseract_collision::ContinuousContactManager::Ptr":
        return _tesseract_python.ContinuousContactManagerFactory_create(self, name)
    __swig_destroy__ = _tesseract_python.delete_ContinuousContactManagerFactory

# Register ContinuousContactManagerFactory in _tesseract_python:
_tesseract_python.ContinuousContactManagerFactory_swigregister(ContinuousContactManagerFactory)

class EnvState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    joints = property(_tesseract_python.EnvState_joints_get, _tesseract_python.EnvState_joints_set)
    link_transforms = property(_tesseract_python.EnvState_link_transforms_get, _tesseract_python.EnvState_link_transforms_set)
    joint_transforms = property(_tesseract_python.EnvState_joint_transforms_get, _tesseract_python.EnvState_joint_transforms_set)

    def __init__(self):
        _tesseract_python.EnvState_swiginit(self, _tesseract_python.new_EnvState())
    __swig_destroy__ = _tesseract_python.delete_EnvState

# Register EnvState in _tesseract_python:
_tesseract_python.EnvState_swigregister(EnvState)

class AdjacencyMapPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    link_name = property(_tesseract_python.AdjacencyMapPair_link_name_get, _tesseract_python.AdjacencyMapPair_link_name_set)
    transform = property(_tesseract_python.AdjacencyMapPair_transform_get, _tesseract_python.AdjacencyMapPair_transform_set)

    def __init__(self):
        _tesseract_python.AdjacencyMapPair_swiginit(self, _tesseract_python.new_AdjacencyMapPair())
    __swig_destroy__ = _tesseract_python.delete_AdjacencyMapPair

# Register AdjacencyMapPair in _tesseract_python:
_tesseract_python.AdjacencyMapPair_swigregister(AdjacencyMapPair)

class AdjacencyMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, scene_graph: "tesseract_scene_graph::SceneGraph::ConstPtr const &", active_links: "vector_string", state: "tesseract_common::TransformMap const &"):
        _tesseract_python.AdjacencyMap_swiginit(self, _tesseract_python.new_AdjacencyMap(scene_graph, active_links, state))
    __swig_destroy__ = _tesseract_python.delete_AdjacencyMap

    def getActiveLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > > const &":
        return _tesseract_python.AdjacencyMap_getActiveLinkNames(self)

    def getLinkMapping(self, link_name: "std::string const &") -> "tesseract_environment::AdjacencyMapPair::ConstPtr":
        return _tesseract_python.AdjacencyMap_getLinkMapping(self, link_name)

# Register AdjacencyMap in _tesseract_python:
_tesseract_python.AdjacencyMap_swigregister(AdjacencyMap)

class Commands(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.Commands_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.Commands___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.Commands___bool__(self)

    def __len__(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::size_type":
        return _tesseract_python.Commands___len__(self)

    def __getslice__(self, i: "std::vector< tesseract_environment::Command::ConstPtr >::difference_type", j: "std::vector< tesseract_environment::Command::ConstPtr >::difference_type") -> "std::vector< tesseract_environment::Command::ConstPtr,std::allocator< tesseract_environment::Command::ConstPtr > > *":
        return _tesseract_python.Commands___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.Commands___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< tesseract_environment::Command::ConstPtr >::difference_type", j: "std::vector< tesseract_environment::Command::ConstPtr >::difference_type") -> "void":
        return _tesseract_python.Commands___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.Commands___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &":
        return _tesseract_python.Commands___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.Commands___setitem__(self, *args)

    def pop(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::value_type":
        return _tesseract_python.Commands_pop(self)

    def append(self, x: "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &") -> "void":
        return _tesseract_python.Commands_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.Commands_empty(self)

    def size(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::size_type":
        return _tesseract_python.Commands_size(self)

    def swap(self, v: "Commands") -> "void":
        return _tesseract_python.Commands_swap(self, v)

    def begin(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::iterator":
        return _tesseract_python.Commands_begin(self)

    def end(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::iterator":
        return _tesseract_python.Commands_end(self)

    def rbegin(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::reverse_iterator":
        return _tesseract_python.Commands_rbegin(self)

    def rend(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::reverse_iterator":
        return _tesseract_python.Commands_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.Commands_clear(self)

    def get_allocator(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::allocator_type":
        return _tesseract_python.Commands_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.Commands_pop_back(self)

    def erase(self, *args) -> "std::vector< tesseract_environment::Command::ConstPtr >::iterator":
        return _tesseract_python.Commands_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.Commands_swiginit(self, _tesseract_python.new_Commands(*args))

    def push_back(self, x: "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &") -> "void":
        return _tesseract_python.Commands_push_back(self, x)

    def front(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &":
        return _tesseract_python.Commands_front(self)

    def back(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &":
        return _tesseract_python.Commands_back(self)

    def assign(self, n: "std::vector< tesseract_environment::Command::ConstPtr >::size_type", x: "std::vector< tesseract_environment::Command::ConstPtr >::value_type const &") -> "void":
        return _tesseract_python.Commands_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.Commands_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.Commands_insert(self, *args)

    def reserve(self, n: "std::vector< tesseract_environment::Command::ConstPtr >::size_type") -> "void":
        return _tesseract_python.Commands_reserve(self, n)

    def capacity(self) -> "std::vector< tesseract_environment::Command::ConstPtr >::size_type":
        return _tesseract_python.Commands_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_Commands

# Register Commands in _tesseract_python:
_tesseract_python.Commands_swigregister(Commands)

CommandType_ADD = _tesseract_python.CommandType_ADD
CommandType_MOVE_LINK = _tesseract_python.CommandType_MOVE_LINK
CommandType_MOVE_JOINT = _tesseract_python.CommandType_MOVE_JOINT
CommandType_REMOVE_LINK = _tesseract_python.CommandType_REMOVE_LINK
CommandType_REMOVE_JOINT = _tesseract_python.CommandType_REMOVE_JOINT
CommandType_CHANGE_LINK_ORIGIN = _tesseract_python.CommandType_CHANGE_LINK_ORIGIN
CommandType_CHANGE_JOINT_ORIGIN = _tesseract_python.CommandType_CHANGE_JOINT_ORIGIN
CommandType_CHANGE_LINK_COLLISION_ENABLED = _tesseract_python.CommandType_CHANGE_LINK_COLLISION_ENABLED
CommandType_CHANGE_LINK_VISIBILITY = _tesseract_python.CommandType_CHANGE_LINK_VISIBILITY
CommandType_ADD_ALLOWED_COLLISION = _tesseract_python.CommandType_ADD_ALLOWED_COLLISION
CommandType_REMOVE_ALLOWED_COLLISION = _tesseract_python.CommandType_REMOVE_ALLOWED_COLLISION
CommandType_REMOVE_ALLOWED_COLLISION_LINK = _tesseract_python.CommandType_REMOVE_ALLOWED_COLLISION_LINK
class Command(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "tesseract_environment::CommandType"):
        _tesseract_python.Command_swiginit(self, _tesseract_python.new_Command(type))
    __swig_destroy__ = _tesseract_python.delete_Command

    def getType(self) -> "tesseract_environment::CommandType":
        return _tesseract_python.Command_getType(self)

# Register Command in _tesseract_python:
_tesseract_python.Command_swigregister(Command)

class AddCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link: "tesseract_scene_graph::Link::ConstPtr", joint: "tesseract_scene_graph::Joint::ConstPtr"):
        _tesseract_python.AddCommand_swiginit(self, _tesseract_python.new_AddCommand(link, joint))

    def getLink(self) -> "tesseract_scene_graph::Link::ConstPtr const":
        return _tesseract_python.AddCommand_getLink(self)

    def getJoint(self) -> "tesseract_scene_graph::Joint::ConstPtr const":
        return _tesseract_python.AddCommand_getJoint(self)
    __swig_destroy__ = _tesseract_python.delete_AddCommand

# Register AddCommand in _tesseract_python:
_tesseract_python.AddCommand_swigregister(AddCommand)

class MoveLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint: "tesseract_scene_graph::Joint::ConstPtr"):
        _tesseract_python.MoveLinkCommand_swiginit(self, _tesseract_python.new_MoveLinkCommand(joint))

    def getJoint(self) -> "tesseract_scene_graph::Joint::ConstPtr const":
        return _tesseract_python.MoveLinkCommand_getJoint(self)
    __swig_destroy__ = _tesseract_python.delete_MoveLinkCommand

# Register MoveLinkCommand in _tesseract_python:
_tesseract_python.MoveLinkCommand_swigregister(MoveLinkCommand)

class MoveJointCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint_name: "std::string const &", parent_link: "std::string const &"):
        _tesseract_python.MoveJointCommand_swiginit(self, _tesseract_python.new_MoveJointCommand(joint_name, parent_link))

    def getJointName(self) -> "std::string const":
        return _tesseract_python.MoveJointCommand_getJointName(self)

    def getParentLink(self) -> "std::string const":
        return _tesseract_python.MoveJointCommand_getParentLink(self)
    __swig_destroy__ = _tesseract_python.delete_MoveJointCommand

# Register MoveJointCommand in _tesseract_python:
_tesseract_python.MoveJointCommand_swigregister(MoveJointCommand)

class RemoveLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name: "std::string const &"):
        _tesseract_python.RemoveLinkCommand_swiginit(self, _tesseract_python.new_RemoveLinkCommand(link_name))

    def getLinkName(self) -> "std::string const":
        return _tesseract_python.RemoveLinkCommand_getLinkName(self)
    __swig_destroy__ = _tesseract_python.delete_RemoveLinkCommand

# Register RemoveLinkCommand in _tesseract_python:
_tesseract_python.RemoveLinkCommand_swigregister(RemoveLinkCommand)

class RemoveJointCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint_name: "std::string const &"):
        _tesseract_python.RemoveJointCommand_swiginit(self, _tesseract_python.new_RemoveJointCommand(joint_name))

    def getJointName(self) -> "std::string const":
        return _tesseract_python.RemoveJointCommand_getJointName(self)
    __swig_destroy__ = _tesseract_python.delete_RemoveJointCommand

# Register RemoveJointCommand in _tesseract_python:
_tesseract_python.RemoveJointCommand_swigregister(RemoveJointCommand)

class ChangeLinkOriginCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name: "std::string const &", origin: "Eigen::Isometry3d const &"):
        _tesseract_python.ChangeLinkOriginCommand_swiginit(self, _tesseract_python.new_ChangeLinkOriginCommand(link_name, origin))

    def getLinkName(self) -> "std::string const":
        return _tesseract_python.ChangeLinkOriginCommand_getLinkName(self)

    def getOrigin(self) -> "Eigen::Isometry3d const":
        return _tesseract_python.ChangeLinkOriginCommand_getOrigin(self)
    __swig_destroy__ = _tesseract_python.delete_ChangeLinkOriginCommand

# Register ChangeLinkOriginCommand in _tesseract_python:
_tesseract_python.ChangeLinkOriginCommand_swigregister(ChangeLinkOriginCommand)

class ChangeJointOriginCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint_name: "std::string const &", origin: "Eigen::Isometry3d const &"):
        _tesseract_python.ChangeJointOriginCommand_swiginit(self, _tesseract_python.new_ChangeJointOriginCommand(joint_name, origin))

    def getJointName(self) -> "std::string const":
        return _tesseract_python.ChangeJointOriginCommand_getJointName(self)

    def getOrigin(self) -> "Eigen::Isometry3d const":
        return _tesseract_python.ChangeJointOriginCommand_getOrigin(self)
    __swig_destroy__ = _tesseract_python.delete_ChangeJointOriginCommand

# Register ChangeJointOriginCommand in _tesseract_python:
_tesseract_python.ChangeJointOriginCommand_swigregister(ChangeJointOriginCommand)

class ChangeLinkCollisionEnabledCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name: "std::string const &", enabled: "bool"):
        _tesseract_python.ChangeLinkCollisionEnabledCommand_swiginit(self, _tesseract_python.new_ChangeLinkCollisionEnabledCommand(link_name, enabled))

    def getLinkName(self) -> "std::string const":
        return _tesseract_python.ChangeLinkCollisionEnabledCommand_getLinkName(self)

    def getEnabled(self) -> "bool":
        return _tesseract_python.ChangeLinkCollisionEnabledCommand_getEnabled(self)
    __swig_destroy__ = _tesseract_python.delete_ChangeLinkCollisionEnabledCommand

# Register ChangeLinkCollisionEnabledCommand in _tesseract_python:
_tesseract_python.ChangeLinkCollisionEnabledCommand_swigregister(ChangeLinkCollisionEnabledCommand)

class ChangeLinkVisibilityCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name: "std::string const &", enabled: "bool"):
        _tesseract_python.ChangeLinkVisibilityCommand_swiginit(self, _tesseract_python.new_ChangeLinkVisibilityCommand(link_name, enabled))

    def getLinkName(self) -> "std::string const":
        return _tesseract_python.ChangeLinkVisibilityCommand_getLinkName(self)

    def getEnabled(self) -> "bool":
        return _tesseract_python.ChangeLinkVisibilityCommand_getEnabled(self)
    __swig_destroy__ = _tesseract_python.delete_ChangeLinkVisibilityCommand

# Register ChangeLinkVisibilityCommand in _tesseract_python:
_tesseract_python.ChangeLinkVisibilityCommand_swigregister(ChangeLinkVisibilityCommand)

class AddAllowedCollisionCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name1: "std::string const &", link_name2: "std::string const &", reason: "std::string const &"):
        _tesseract_python.AddAllowedCollisionCommand_swiginit(self, _tesseract_python.new_AddAllowedCollisionCommand(link_name1, link_name2, reason))

    def getLinkName1(self) -> "std::string const":
        return _tesseract_python.AddAllowedCollisionCommand_getLinkName1(self)

    def getLinkName2(self) -> "std::string const":
        return _tesseract_python.AddAllowedCollisionCommand_getLinkName2(self)

    def getReason(self) -> "std::string const":
        return _tesseract_python.AddAllowedCollisionCommand_getReason(self)
    __swig_destroy__ = _tesseract_python.delete_AddAllowedCollisionCommand

# Register AddAllowedCollisionCommand in _tesseract_python:
_tesseract_python.AddAllowedCollisionCommand_swigregister(AddAllowedCollisionCommand)

class RemoveAllowedCollisionCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name1: "std::string const &", link_name2: "std::string const &"):
        _tesseract_python.RemoveAllowedCollisionCommand_swiginit(self, _tesseract_python.new_RemoveAllowedCollisionCommand(link_name1, link_name2))

    def getLinkName1(self) -> "std::string const":
        return _tesseract_python.RemoveAllowedCollisionCommand_getLinkName1(self)

    def getLinkName2(self) -> "std::string const":
        return _tesseract_python.RemoveAllowedCollisionCommand_getLinkName2(self)
    __swig_destroy__ = _tesseract_python.delete_RemoveAllowedCollisionCommand

# Register RemoveAllowedCollisionCommand in _tesseract_python:
_tesseract_python.RemoveAllowedCollisionCommand_swigregister(RemoveAllowedCollisionCommand)

class RemoveAllowedCollisionLinkCommand(Command):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, link_name: "std::string const &"):
        _tesseract_python.RemoveAllowedCollisionLinkCommand_swiginit(self, _tesseract_python.new_RemoveAllowedCollisionLinkCommand(link_name))

    def getLinkName(self) -> "std::string const":
        return _tesseract_python.RemoveAllowedCollisionLinkCommand_getLinkName(self)
    __swig_destroy__ = _tesseract_python.delete_RemoveAllowedCollisionLinkCommand

# Register RemoveAllowedCollisionLinkCommand in _tesseract_python:
_tesseract_python.RemoveAllowedCollisionLinkCommand_swigregister(RemoveAllowedCollisionLinkCommand)

class StateSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_StateSolver

    def init(self, scene_graph: "tesseract_scene_graph::SceneGraph::ConstPtr") -> "bool":
        return _tesseract_python.StateSolver_init(self, scene_graph)

    def setState(self, *args) -> "void":
        return _tesseract_python.StateSolver_setState(self, *args)

    def getState(self, *args) -> "tesseract_environment::EnvState::Ptr":
        return _tesseract_python.StateSolver_getState(self, *args)

    def getCurrentState(self) -> "tesseract_environment::EnvState::ConstPtr":
        return _tesseract_python.StateSolver_getCurrentState(self)

    def clone(self) -> "tesseract_environment::StateSolver::Ptr":
        return _tesseract_python.StateSolver_clone(self)

# Register StateSolver in _tesseract_python:
_tesseract_python.StateSolver_swigregister(StateSolver)

class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_Environment

    def init(self, scene_graph: "tesseract_scene_graph::SceneGraph::Ptr") -> "bool":
        return _tesseract_python.Environment_init(self, scene_graph)

    def getRevision(self) -> "int":
        return _tesseract_python.Environment_getRevision(self)

    def getCommandHistory(self) -> "tesseract_environment::Commands const &":
        return _tesseract_python.Environment_getCommandHistory(self)

    def checkInitialized(self) -> "bool":
        return _tesseract_python.Environment_checkInitialized(self)

    def getSceneGraph(self) -> "tesseract_scene_graph::SceneGraph::ConstPtr const &":
        return _tesseract_python.Environment_getSceneGraph(self)

    def setName(self, name: "std::string const &") -> "void":
        return _tesseract_python.Environment_setName(self, name)

    def getName(self) -> "std::string const &":
        return _tesseract_python.Environment_getName(self)

    def setState(self, *args) -> "void":
        return _tesseract_python.Environment_setState(self, *args)

    def getState(self, *args) -> "tesseract_environment::EnvState::Ptr":
        return _tesseract_python.Environment_getState(self, *args)

    def getCurrentState(self) -> "tesseract_environment::EnvState::ConstPtr":
        return _tesseract_python.Environment_getCurrentState(self)

    def removeLink(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_removeLink(self, name)

    def getLink(self, name: "std::string const &") -> "tesseract_scene_graph::Link::ConstPtr":
        return _tesseract_python.Environment_getLink(self, name)

    def getJoint(self, name: "std::string const &") -> "tesseract_scene_graph::Joint::ConstPtr":
        return _tesseract_python.Environment_getJoint(self, name)

    def removeJoint(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_removeJoint(self, name)

    def moveJoint(self, joint_name: "std::string const &", parent_link: "std::string const &") -> "bool":
        return _tesseract_python.Environment_moveJoint(self, joint_name, parent_link)

    def changeJointOrigin(self, joint_name: "std::string const &", new_origin: "Eigen::Isometry3d const &") -> "bool":
        return _tesseract_python.Environment_changeJointOrigin(self, joint_name, new_origin)

    def setLinkCollisionEnabled(self, name: "std::string const &", enabled: "bool") -> "void":
        return _tesseract_python.Environment_setLinkCollisionEnabled(self, name, enabled)

    def getLinkCollisionEnabled(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_getLinkCollisionEnabled(self, name)

    def setLinkVisibility(self, name: "std::string const &", visibility: "bool") -> "void":
        return _tesseract_python.Environment_setLinkVisibility(self, name, visibility)

    def getLinkVisibility(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_getLinkVisibility(self, name)

    def addAllowedCollision(self, link_name1: "std::string const &", link_name2: "std::string const &", reason: "std::string const &") -> "void":
        return _tesseract_python.Environment_addAllowedCollision(self, link_name1, link_name2, reason)

    def removeAllowedCollision(self, *args) -> "void":
        return _tesseract_python.Environment_removeAllowedCollision(self, *args)

    def getAllowedCollisionMatrix(self) -> "tesseract_scene_graph::AllowedCollisionMatrix::ConstPtr":
        return _tesseract_python.Environment_getAllowedCollisionMatrix(self)

    def getJointNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.Environment_getJointNames(self)

    def getActiveJointNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.Environment_getActiveJointNames(self)

    def getCurrentJointValues(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.Environment_getCurrentJointValues(self, *args)

    def getRootLinkName(self) -> "std::string const &":
        return _tesseract_python.Environment_getRootLinkName(self)

    def getLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.Environment_getLinkNames(self)

    def getActiveLinkNames(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.Environment_getActiveLinkNames(self)

    def getLinkTransforms(self) -> "tesseract_common::VectorIsometry3d":
        return _tesseract_python.Environment_getLinkTransforms(self)

    def getLinkTransform(self, link_name: "std::string const &") -> "Eigen::Isometry3d const &":
        return _tesseract_python.Environment_getLinkTransform(self, link_name)

    def getStateSolver(self) -> "tesseract_environment::StateSolver::Ptr":
        return _tesseract_python.Environment_getStateSolver(self)

    def setActiveDiscreteContactManager(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_setActiveDiscreteContactManager(self, name)

    def getDiscreteContactManager(self, *args) -> "tesseract_collision::DiscreteContactManager::Ptr":
        return _tesseract_python.Environment_getDiscreteContactManager(self, *args)

    def setActiveContinuousContactManager(self, name: "std::string const &") -> "bool":
        return _tesseract_python.Environment_setActiveContinuousContactManager(self, name)

    def getContinuousContactManager(self, *args) -> "tesseract_collision::ContinuousContactManager::Ptr":
        return _tesseract_python.Environment_getContinuousContactManager(self, *args)

    def registerDiscreteContactManager(self, name: "std::string const &", create_function: "tesseract_collision::DiscreteContactManagerFactory::CreateMethod") -> "bool":
        return _tesseract_python.Environment_registerDiscreteContactManager(self, name, create_function)

    def registerContinuousContactManager(self, name: "std::string const &", create_function: "tesseract_collision::ContinuousContactManagerFactory::CreateMethod") -> "bool":
        return _tesseract_python.Environment_registerContinuousContactManager(self, name, create_function)

    def addLink(self, *args) -> "bool":
        return _tesseract_python.Environment_addLink(self, *args)

    def moveLink(self, joint: "tesseract_scene_graph::Joint::ConstPtr") -> "bool":
        return _tesseract_python.Environment_moveLink(self, joint)

# Register Environment in _tesseract_python:
_tesseract_python.Environment_swigregister(Environment)

class ForwardKinematicsManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.ForwardKinematicsManager_swiginit(self, _tesseract_python.new_ForwardKinematicsManager())
    __swig_destroy__ = _tesseract_python.delete_ForwardKinematicsManager

    def registerFwdKinematicsFactory(self, factory: "tesseract_kinematics::ForwardKinematicsFactory::Ptr") -> "bool":
        return _tesseract_python.ForwardKinematicsManager_registerFwdKinematicsFactory(self, factory)

    def removeFwdKinematicsFactory(self, name: "std::string const &") -> "void":
        return _tesseract_python.ForwardKinematicsManager_removeFwdKinematicsFactory(self, name)

    def getAvailableFwdKinematicsSolvers(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.ForwardKinematicsManager_getAvailableFwdKinematicsSolvers(self, *args)

    def getFwdKinematicFactory(self, name: "std::string const &") -> "tesseract_kinematics::ForwardKinematicsFactory::ConstPtr":
        return _tesseract_python.ForwardKinematicsManager_getFwdKinematicFactory(self, name)

    def addFwdKinematicSolver(self, solver: "tesseract_kinematics::ForwardKinematics::ConstPtr const &") -> "bool":
        return _tesseract_python.ForwardKinematicsManager_addFwdKinematicSolver(self, solver)

    def removeFwdKinematicSolver(self, *args) -> "void":
        return _tesseract_python.ForwardKinematicsManager_removeFwdKinematicSolver(self, *args)

    def getAvailableFwdKinematicsManipulators(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.ForwardKinematicsManager_getAvailableFwdKinematicsManipulators(self)

    def setDefaultFwdKinematicSolver(self, manipulator: "std::string const &", name: "std::string const &") -> "bool":
        return _tesseract_python.ForwardKinematicsManager_setDefaultFwdKinematicSolver(self, manipulator, name)

    def getFwdKinematicSolver(self, *args) -> "tesseract_kinematics::ForwardKinematics::Ptr":
        return _tesseract_python.ForwardKinematicsManager_getFwdKinematicSolver(self, *args)

# Register ForwardKinematicsManager in _tesseract_python:
_tesseract_python.ForwardKinematicsManager_swigregister(ForwardKinematicsManager)

class InverseKinematicsManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.InverseKinematicsManager_swiginit(self, _tesseract_python.new_InverseKinematicsManager())
    __swig_destroy__ = _tesseract_python.delete_InverseKinematicsManager

    def registerInvKinematicsFactory(self, factory: "tesseract_kinematics::InverseKinematicsFactory::Ptr") -> "bool":
        return _tesseract_python.InverseKinematicsManager_registerInvKinematicsFactory(self, factory)

    def removeInvKinematicsFactory(self, name: "std::string const &") -> "void":
        return _tesseract_python.InverseKinematicsManager_removeInvKinematicsFactory(self, name)

    def getAvailableInvKinematicsSolvers(self, *args) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.InverseKinematicsManager_getAvailableInvKinematicsSolvers(self, *args)

    def getInvKinematicFactory(self, name: "std::string const &") -> "tesseract_kinematics::InverseKinematicsFactory::ConstPtr":
        return _tesseract_python.InverseKinematicsManager_getInvKinematicFactory(self, name)

    def addInvKinematicSolver(self, solver: "tesseract_kinematics::InverseKinematics::ConstPtr") -> "bool":
        return _tesseract_python.InverseKinematicsManager_addInvKinematicSolver(self, solver)

    def removeInvKinematicSolver(self, *args) -> "void":
        return _tesseract_python.InverseKinematicsManager_removeInvKinematicSolver(self, *args)

    def getAvailableInvKinematicsManipulators(self) -> "std::vector< std::string,std::allocator< std::string > >":
        return _tesseract_python.InverseKinematicsManager_getAvailableInvKinematicsManipulators(self)

    def setDefaultInvKinematicSolver(self, manipulator: "std::string const &", name: "std::string const &") -> "bool":
        return _tesseract_python.InverseKinematicsManager_setDefaultInvKinematicSolver(self, manipulator, name)

    def getInvKinematicSolver(self, *args) -> "tesseract_kinematics::InverseKinematics::Ptr":
        return _tesseract_python.InverseKinematicsManager_getInvKinematicSolver(self, *args)

# Register InverseKinematicsManager in _tesseract_python:
_tesseract_python.InverseKinematicsManager_swigregister(InverseKinematicsManager)

class Tesseract(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _tesseract_python.Tesseract_swiginit(self, _tesseract_python.new_Tesseract())
    __swig_destroy__ = _tesseract_python.delete_Tesseract

    def isInitialized(self) -> "bool":
        return _tesseract_python.Tesseract_isInitialized(self)

    def init(self, *args) -> "bool":
        return _tesseract_python.Tesseract_init(self, *args)

    def getSRDFModel(self) -> "tesseract_scene_graph::SRDFModel::Ptr const &":
        return _tesseract_python.Tesseract_getSRDFModel(self)

    def getSRDFModelConst(self) -> "tesseract_scene_graph::SRDFModel::ConstPtr const &":
        return _tesseract_python.Tesseract_getSRDFModelConst(self)

    def getEnvironment(self) -> "tesseract_environment::Environment::Ptr const &":
        return _tesseract_python.Tesseract_getEnvironment(self)

    def getEnvironmentConst(self) -> "tesseract_environment::Environment::ConstPtr const &":
        return _tesseract_python.Tesseract_getEnvironmentConst(self)

    def getFwdKinematicsManager(self) -> "tesseract::ForwardKinematicsManager::Ptr const &":
        return _tesseract_python.Tesseract_getFwdKinematicsManager(self)

    def getFwdKinematicsManagerConst(self) -> "tesseract::ForwardKinematicsManager::ConstPtr const &":
        return _tesseract_python.Tesseract_getFwdKinematicsManagerConst(self)

    def getInvKinematicsManager(self) -> "tesseract::InverseKinematicsManager::Ptr const &":
        return _tesseract_python.Tesseract_getInvKinematicsManager(self)

    def getInvKinematicsManagerConst(self) -> "tesseract::InverseKinematicsManager::ConstPtr const &":
        return _tesseract_python.Tesseract_getInvKinematicsManagerConst(self)

    def getGroupStates(self) -> "tesseract_scene_graph::GroupStates &":
        return _tesseract_python.Tesseract_getGroupStates(self)

    def getGroupStatesConst(self) -> "tesseract_scene_graph::GroupStates const &":
        return _tesseract_python.Tesseract_getGroupStatesConst(self)

    def getGroupTCPs(self, *args) -> "tesseract_scene_graph::GroupTCPs const &":
        return _tesseract_python.Tesseract_getGroupTCPs(self, *args)

# Register Tesseract in _tesseract_python:
_tesseract_python.Tesseract_swigregister(Tesseract)

class Visualization(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_Visualization

    def plotTrajectory(self, joint_names: "vector_string", traj: "Eigen::Ref< tesseract_common::TrajArray const > const &") -> "void":
        return _tesseract_python.Visualization_plotTrajectory(self, joint_names, traj)

    def plotContactResults(self, link_names: "vector_string", dist_results: "ContactResultVector", safety_distances: "Eigen::Ref< Eigen::VectorXd const > const &") -> "void":
        return _tesseract_python.Visualization_plotContactResults(self, link_names, dist_results, safety_distances)

    def plotArrow(self, pt1: "Eigen::Ref< Eigen::Vector3d const > const &", pt2: "Eigen::Ref< Eigen::Vector3d const > const &", rgba: "Eigen::Ref< Eigen::Vector4d const > const &", scale: "double") -> "void":
        return _tesseract_python.Visualization_plotArrow(self, pt1, pt2, rgba, scale)

    def plotAxis(self, axis: "Eigen::Isometry3d const &", scale: "double") -> "void":
        return _tesseract_python.Visualization_plotAxis(self, axis, scale)

    def clear(self) -> "void":
        return _tesseract_python.Visualization_clear(self)

    def waitForInput(self) -> "void":
        return _tesseract_python.Visualization_waitForInput(self)

# Register Visualization in _tesseract_python:
_tesseract_python.Visualization_swigregister(Visualization)

WaypointType_JOINT_WAYPOINT = _tesseract_python.WaypointType_JOINT_WAYPOINT
WaypointType_JOINT_TOLERANCED_WAYPOINT = _tesseract_python.WaypointType_JOINT_TOLERANCED_WAYPOINT
WaypointType_CARTESIAN_WAYPOINT = _tesseract_python.WaypointType_CARTESIAN_WAYPOINT

def isCartesianWaypointType(type: "tesseract_motion_planners::WaypointType") -> "bool":
    return _tesseract_python.isCartesianWaypointType(type)

def isJointWaypointType(type: "tesseract_motion_planners::WaypointType") -> "bool":
    return _tesseract_python.isJointWaypointType(type)
class Waypoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, type: "tesseract_motion_planners::WaypointType"):
        _tesseract_python.Waypoint_swiginit(self, _tesseract_python.new_Waypoint(type))
    __swig_destroy__ = _tesseract_python.delete_Waypoint

    def getType(self) -> "tesseract_motion_planners::WaypointType":
        return _tesseract_python.Waypoint_getType(self)

    def isCritical(self) -> "bool":
        return _tesseract_python.Waypoint_isCritical(self)

    def setIsCritical(self, is_critical: "bool") -> "void":
        return _tesseract_python.Waypoint_setIsCritical(self, is_critical)

    def setCoefficients(self, coefficients: "Eigen::VectorXd") -> "bool":
        return _tesseract_python.Waypoint_setCoefficients(self, coefficients)

    def getCoefficients(self) -> "Eigen::VectorXd const":
        return _tesseract_python.Waypoint_getCoefficients(self)

# Register Waypoint in _tesseract_python:
_tesseract_python.Waypoint_swigregister(Waypoint)

class JointWaypoint(Waypoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint_positions: "Eigen::VectorXd", joint_names: "vector_string"):
        _tesseract_python.JointWaypoint_swiginit(self, _tesseract_python.new_JointWaypoint(joint_positions, joint_names))

    def getPositions(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.JointWaypoint_getPositions(self, *args)

    def getCoefficients(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.JointWaypoint_getCoefficients(self, *args)

    def getNames(self) -> "std::vector< std::string,std::allocator< std::string > > const":
        return _tesseract_python.JointWaypoint_getNames(self)

    def compare(self, joint_names: "vector_string") -> "bool":
        return _tesseract_python.JointWaypoint_compare(self, joint_names)
    __swig_destroy__ = _tesseract_python.delete_JointWaypoint

# Register JointWaypoint in _tesseract_python:
_tesseract_python.JointWaypoint_swigregister(JointWaypoint)

class CartesianWaypoint(Waypoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.CartesianWaypoint_swiginit(self, _tesseract_python.new_CartesianWaypoint(*args))

    def getTransform(self) -> "Eigen::Isometry3d const":
        return _tesseract_python.CartesianWaypoint_getTransform(self)

    def getPosition(self) -> "Eigen::Vector3d":
        return _tesseract_python.CartesianWaypoint_getPosition(self)

    def getOrientation(self) -> "Eigen::Vector4d":
        return _tesseract_python.CartesianWaypoint_getOrientation(self)

    def getParentLinkName(self) -> "std::string":
        return _tesseract_python.CartesianWaypoint_getParentLinkName(self)
    __swig_destroy__ = _tesseract_python.delete_CartesianWaypoint

# Register CartesianWaypoint in _tesseract_python:
_tesseract_python.CartesianWaypoint_swigregister(CartesianWaypoint)

class JointTolerancedWaypoint(JointWaypoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, joint_positions: "Eigen::VectorXd", joint_names: "vector_string"):
        _tesseract_python.JointTolerancedWaypoint_swiginit(self, _tesseract_python.new_JointTolerancedWaypoint(joint_positions, joint_names))

    def setUpperTolerance(self, upper_tolerance: "Eigen::VectorXd") -> "bool":
        return _tesseract_python.JointTolerancedWaypoint_setUpperTolerance(self, upper_tolerance)

    def getUpperTolerance(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.JointTolerancedWaypoint_getUpperTolerance(self, *args)

    def setLowerTolerance(self, lower_tolerance: "Eigen::VectorXd") -> "bool":
        return _tesseract_python.JointTolerancedWaypoint_setLowerTolerance(self, lower_tolerance)

    def getLowerTolerance(self, *args) -> "Eigen::VectorXd":
        return _tesseract_python.JointTolerancedWaypoint_getLowerTolerance(self, *args)
    __swig_destroy__ = _tesseract_python.delete_JointTolerancedWaypoint

# Register JointTolerancedWaypoint in _tesseract_python:
_tesseract_python.JointTolerancedWaypoint_swigregister(JointTolerancedWaypoint)


def interpolate(*args) -> "std::vector< tesseract_motion_planners::Waypoint::Ptr,std::allocator< tesseract_motion_planners::Waypoint::Ptr > >":
    return _tesseract_python.interpolate(*args)
class WaypointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.WaypointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.WaypointVector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.WaypointVector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::size_type":
        return _tesseract_python.WaypointVector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::difference_type") -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint >,std::allocator< std::shared_ptr< tesseract_motion_planners::Waypoint > > > *":
        return _tesseract_python.WaypointVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.WaypointVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::difference_type", j: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::difference_type") -> "void":
        return _tesseract_python.WaypointVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.WaypointVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &":
        return _tesseract_python.WaypointVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.WaypointVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type":
        return _tesseract_python.WaypointVector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &") -> "void":
        return _tesseract_python.WaypointVector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.WaypointVector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::size_type":
        return _tesseract_python.WaypointVector_size(self)

    def swap(self, v: "WaypointVector") -> "void":
        return _tesseract_python.WaypointVector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::iterator":
        return _tesseract_python.WaypointVector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::iterator":
        return _tesseract_python.WaypointVector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::reverse_iterator":
        return _tesseract_python.WaypointVector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::reverse_iterator":
        return _tesseract_python.WaypointVector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.WaypointVector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::allocator_type":
        return _tesseract_python.WaypointVector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.WaypointVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::iterator":
        return _tesseract_python.WaypointVector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.WaypointVector_swiginit(self, _tesseract_python.new_WaypointVector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &") -> "void":
        return _tesseract_python.WaypointVector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &":
        return _tesseract_python.WaypointVector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &":
        return _tesseract_python.WaypointVector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::size_type", x: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::value_type const &") -> "void":
        return _tesseract_python.WaypointVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.WaypointVector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.WaypointVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::size_type") -> "void":
        return _tesseract_python.WaypointVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< tesseract_motion_planners::Waypoint > >::size_type":
        return _tesseract_python.WaypointVector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_WaypointVector

# Register WaypointVector in _tesseract_python:
_tesseract_python.WaypointVector_swigregister(WaypointVector)

class PlannerRequest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_tesseract_python.PlannerRequest_name_get, _tesseract_python.PlannerRequest_name_set)
    tesseract = property(_tesseract_python.PlannerRequest_tesseract_get, _tesseract_python.PlannerRequest_tesseract_set)
    start_state = property(_tesseract_python.PlannerRequest_start_state_get, _tesseract_python.PlannerRequest_start_state_set)
    config = property(_tesseract_python.PlannerRequest_config_get, _tesseract_python.PlannerRequest_config_set)
    config_format = property(_tesseract_python.PlannerRequest_config_format_get, _tesseract_python.PlannerRequest_config_format_set)

    def __init__(self):
        _tesseract_python.PlannerRequest_swiginit(self, _tesseract_python.new_PlannerRequest())
    __swig_destroy__ = _tesseract_python.delete_PlannerRequest

# Register PlannerRequest in _tesseract_python:
_tesseract_python.PlannerRequest_swigregister(PlannerRequest)

class PlannerResponse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    joint_trajectory = property(_tesseract_python.PlannerResponse_joint_trajectory_get, _tesseract_python.PlannerResponse_joint_trajectory_set)
    status = property(_tesseract_python.PlannerResponse_status_get, _tesseract_python.PlannerResponse_status_set)
    succeeded_waypoints = property(_tesseract_python.PlannerResponse_succeeded_waypoints_get, _tesseract_python.PlannerResponse_succeeded_waypoints_set)
    failed_waypoints = property(_tesseract_python.PlannerResponse_failed_waypoints_get, _tesseract_python.PlannerResponse_failed_waypoints_set)

    def __init__(self):
        _tesseract_python.PlannerResponse_swiginit(self, _tesseract_python.new_PlannerResponse())
    __swig_destroy__ = _tesseract_python.delete_PlannerResponse

# Register PlannerResponse in _tesseract_python:
_tesseract_python.PlannerResponse_swigregister(PlannerResponse)

PostPlanCheckType_NONE = _tesseract_python.PostPlanCheckType_NONE
PostPlanCheckType_SINGLE_TIMESTEP_COLLISION = _tesseract_python.PostPlanCheckType_SINGLE_TIMESTEP_COLLISION
PostPlanCheckType_DISCRETE_CONTINUOUS_COLLISION = _tesseract_python.PostPlanCheckType_DISCRETE_CONTINUOUS_COLLISION
PostPlanCheckType_CAST_CONTINUOUS_COLLISION = _tesseract_python.PostPlanCheckType_CAST_CONTINUOUS_COLLISION
class TrajectoryValidator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, continuous_manager: "tesseract_collision::ContinuousContactManager::Ptr"=0, discrete_manager: "tesseract_collision::DiscreteContactManager::Ptr"=0, longest_valid_segment_length: "double"=0.01, verbose: "bool"=False):
        _tesseract_python.TrajectoryValidator_swiginit(self, _tesseract_python.new_TrajectoryValidator(continuous_manager, discrete_manager, longest_valid_segment_length, verbose))

    def trajectoryValid(self, trajectory: "tesseract_common::TrajArray const &", check_type: "tesseract_motion_planners::PostPlanCheckType const &", state_solver: "StateSolver", joint_names: "vector_string") -> "bool":
        return _tesseract_python.TrajectoryValidator_trajectoryValid(self, trajectory, check_type, state_solver, joint_names)
    __swig_destroy__ = _tesseract_python.delete_TrajectoryValidator

# Register TrajectoryValidator in _tesseract_python:
_tesseract_python.TrajectoryValidator_swigregister(TrajectoryValidator)

class MotionPlanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tesseract_python.delete_MotionPlanner

    def getName(self) -> "std::string const &":
        return _tesseract_python.MotionPlanner_getName(self)

    def getRequest(self) -> "tesseract_motion_planners::PlannerRequest const &":
        return _tesseract_python.MotionPlanner_getRequest(self)

    def setRequest(self, request: "PlannerRequest") -> "void":
        return _tesseract_python.MotionPlanner_setRequest(self, request)

    def _solve(self, *args) -> "tesseract_common::StatusCode":
        return _tesseract_python.MotionPlanner__solve(self, *args)

    def solve(self, check_type=PostPlanCheckType_DISCRETE_CONTINUOUS_COLLISION, verbose=False):
        response = PlannerResponse()
        status_code = self._solve(response, verbose)
        return status_code, response


    def isConfigured(self) -> "tesseract_common::StatusCode":
        return _tesseract_python.MotionPlanner_isConfigured(self)

    def terminate(self) -> "bool":
        return _tesseract_python.MotionPlanner_terminate(self)

    def clear(self) -> "void":
        return _tesseract_python.MotionPlanner_clear(self)

# Register MotionPlanner in _tesseract_python:
_tesseract_python.MotionPlanner_swigregister(MotionPlanner)

class SafetyMarginDataPtr_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.SafetyMarginDataPtr_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.SafetyMarginDataPtr_vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.SafetyMarginDataPtr_vector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::size_type":
        return _tesseract_python.SafetyMarginDataPtr_vector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::difference_type", j: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::difference_type") -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData >,std::allocator< std::shared_ptr< trajopt::SafetyMarginData > > > *":
        return _tesseract_python.SafetyMarginDataPtr_vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::difference_type", j: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::difference_type") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &":
        return _tesseract_python.SafetyMarginDataPtr_vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type":
        return _tesseract_python.SafetyMarginDataPtr_vector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.SafetyMarginDataPtr_vector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::size_type":
        return _tesseract_python.SafetyMarginDataPtr_vector_size(self)

    def swap(self, v: "SafetyMarginDataPtr_vector") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::iterator":
        return _tesseract_python.SafetyMarginDataPtr_vector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::iterator":
        return _tesseract_python.SafetyMarginDataPtr_vector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::reverse_iterator":
        return _tesseract_python.SafetyMarginDataPtr_vector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::reverse_iterator":
        return _tesseract_python.SafetyMarginDataPtr_vector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::allocator_type":
        return _tesseract_python.SafetyMarginDataPtr_vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::iterator":
        return _tesseract_python.SafetyMarginDataPtr_vector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.SafetyMarginDataPtr_vector_swiginit(self, _tesseract_python.new_SafetyMarginDataPtr_vector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &":
        return _tesseract_python.SafetyMarginDataPtr_vector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &":
        return _tesseract_python.SafetyMarginDataPtr_vector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::size_type", x: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::value_type const &") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::size_type") -> "void":
        return _tesseract_python.SafetyMarginDataPtr_vector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData > >::size_type":
        return _tesseract_python.SafetyMarginDataPtr_vector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_SafetyMarginDataPtr_vector

# Register SafetyMarginDataPtr_vector in _tesseract_python:
_tesseract_python.SafetyMarginDataPtr_vector_swigregister(SafetyMarginDataPtr_vector)

class TermInfoPtr_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _tesseract_python.TermInfoPtr_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _tesseract_python.TermInfoPtr_vector___nonzero__(self)

    def __bool__(self) -> "bool":
        return _tesseract_python.TermInfoPtr_vector___bool__(self)

    def __len__(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::size_type":
        return _tesseract_python.TermInfoPtr_vector___len__(self)

    def __getslice__(self, i: "std::vector< std::shared_ptr< trajopt::TermInfo > >::difference_type", j: "std::vector< std::shared_ptr< trajopt::TermInfo > >::difference_type") -> "std::vector< std::shared_ptr< trajopt::TermInfo >,std::allocator< std::shared_ptr< trajopt::TermInfo > > > *":
        return _tesseract_python.TermInfoPtr_vector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _tesseract_python.TermInfoPtr_vector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::shared_ptr< trajopt::TermInfo > >::difference_type", j: "std::vector< std::shared_ptr< trajopt::TermInfo > >::difference_type") -> "void":
        return _tesseract_python.TermInfoPtr_vector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _tesseract_python.TermInfoPtr_vector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &":
        return _tesseract_python.TermInfoPtr_vector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _tesseract_python.TermInfoPtr_vector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type":
        return _tesseract_python.TermInfoPtr_vector_pop(self)

    def append(self, x: "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &") -> "void":
        return _tesseract_python.TermInfoPtr_vector_append(self, x)

    def empty(self) -> "bool":
        return _tesseract_python.TermInfoPtr_vector_empty(self)

    def size(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::size_type":
        return _tesseract_python.TermInfoPtr_vector_size(self)

    def swap(self, v: "TermInfoPtr_vector") -> "void":
        return _tesseract_python.TermInfoPtr_vector_swap(self, v)

    def begin(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::iterator":
        return _tesseract_python.TermInfoPtr_vector_begin(self)

    def end(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::iterator":
        return _tesseract_python.TermInfoPtr_vector_end(self)

    def rbegin(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::reverse_iterator":
        return _tesseract_python.TermInfoPtr_vector_rbegin(self)

    def rend(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::reverse_iterator":
        return _tesseract_python.TermInfoPtr_vector_rend(self)

    def clear(self) -> "void":
        return _tesseract_python.TermInfoPtr_vector_clear(self)

    def get_allocator(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::allocator_type":
        return _tesseract_python.TermInfoPtr_vector_get_allocator(self)

    def pop_back(self) -> "void":
        return _tesseract_python.TermInfoPtr_vector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::iterator":
        return _tesseract_python.TermInfoPtr_vector_erase(self, *args)

    def __init__(self, *args):
        _tesseract_python.TermInfoPtr_vector_swiginit(self, _tesseract_python.new_TermInfoPtr_vector(*args))

    def push_back(self, x: "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &") -> "void":
        return _tesseract_python.TermInfoPtr_vector_push_back(self, x)

    def front(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &":
        return _tesseract_python.TermInfoPtr_vector_front(self)

    def back(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &":
        return _tesseract_python.TermInfoPtr_vector_back(self)

    def assign(self, n: "std::vector< std::shared_ptr< trajopt::TermInfo > >::size_type", x: "std::vector< std::shared_ptr< trajopt::TermInfo > >::value_type const &") -> "void":
        return _tesseract_python.TermInfoPtr_vector_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _tesseract_python.TermInfoPtr_vector_resize(self, *args)

    def insert(self, *args) -> "void":
        return _tesseract_python.TermInfoPtr_vector_insert(self, *args)

    def reserve(self, n: "std::vector< std::shared_ptr< trajopt::TermInfo > >::size_type") -> "void":
        return _tesseract_python.TermInfoPtr_vector_reserve(self, n)

    def capacity(self) -> "std::vector< std::shared_ptr< trajopt::TermInfo > >::size_type":
        return _tesseract_python.TermInfoPtr_vector_capacity(self)
    __swig_destroy__ = _tesseract_python.delete_TermInfoPtr_vector

# Register TermInfoPtr_vector in _tesseract_python:
_tesseract_python.TermInfoPtr_vector_swigregister(TermInfoPtr_vector)

class ModelType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GUROBI = _tesseract_python.ModelType_GUROBI
    BPMPD = _tesseract_python.ModelType_BPMPD
    OSQP = _tesseract_python.ModelType_OSQP
    QPOASES = _tesseract_python.ModelType_QPOASES
    AUTO_SOLVER = _tesseract_python.ModelType_AUTO_SOLVER

    def __init__(self, *args):
        _tesseract_python.ModelType_swiginit(self, _tesseract_python.new_ModelType(*args))

    def __int__(self) -> "int":
        return _tesseract_python.ModelType___int__(self)

    def __eq__(self, *args) -> "bool":
        return _tesseract_python.ModelType___eq__(self, *args)

    def __ne__(self, a: "ModelType") -> "bool":
        return _tesseract_python.ModelType___ne__(self, a)

    def fromJson(self, v: "Json::Value const &") -> "void":
        return _tesseract_python.ModelType_fromJson(self, v)
    __swig_destroy__ = _tesseract_python.delete_ModelType

# Register ModelType in _tesseract_python:
_tesseract_python.ModelType_swigregister(ModelType)
cvar = _tesseract_python.cvar
ModelType.MODEL_NAMES_ = _tesseract_python.cvar.ModelType_MODEL_NAMES_

class BasicTrustRegionSQPParameters(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    improve_ratio_threshold = property(_tesseract_python.BasicTrustRegionSQPParameters_improve_ratio_threshold_get, _tesseract_python.BasicTrustRegionSQPParameters_improve_ratio_threshold_set)
    min_trust_box_size = property(_tesseract_python.BasicTrustRegionSQPParameters_min_trust_box_size_get, _tesseract_python.BasicTrustRegionSQPParameters_min_trust_box_size_set)
    min_approx_improve = property(_tesseract_python.BasicTrustRegionSQPParameters_min_approx_improve_get, _tesseract_python.BasicTrustRegionSQPParameters_min_approx_improve_set)
    min_approx_improve_frac = property(_tesseract_python.BasicTrustRegionSQPParameters_min_approx_improve_frac_get, _tesseract_python.BasicTrustRegionSQPParameters_min_approx_improve_frac_set)
    max_iter = property(_tesseract_python.BasicTrustRegionSQPParameters_max_iter_get, _tesseract_python.BasicTrustRegionSQPParameters_max_iter_set)
    trust_shrink_ratio = property(_tesseract_python.BasicTrustRegionSQPParameters_trust_shrink_ratio_get, _tesseract_python.BasicTrustRegionSQPParameters_trust_shrink_ratio_set)
    trust_expand_ratio = property(_tesseract_python.BasicTrustRegionSQPParameters_trust_expand_ratio_get, _tesseract_python.BasicTrustRegionSQPParameters_trust_expand_ratio_set)
    cnt_tolerance = property(_tesseract_python.BasicTrustRegionSQPParameters_cnt_tolerance_get, _tesseract_python.BasicTrustRegionSQPParameters_cnt_tolerance_set)
    max_merit_coeff_increases = property(_tesseract_python.BasicTrustRegionSQPParameters_max_merit_coeff_increases_get, _tesseract_python.BasicTrustRegionSQPParameters_max_merit_coeff_increases_set)
    merit_coeff_increase_ratio = property(_tesseract_python.BasicTrustRegionSQPParameters_merit_coeff_increase_ratio_get, _tesseract_python.BasicTrustRegionSQPParameters_merit_coeff_increase_ratio_set)
    max_time = property(_tesseract_python.BasicTrustRegionSQPParameters_max_time_get, _tesseract_python.BasicTrustRegionSQPParameters_max_time_set)
    initial_merit_error_coeff = property(_tesseract_python.BasicTrustRegionSQPParameters_initial_merit_error_coeff_get, _tesseract_python.BasicTrustRegionSQPParameters_initial_merit_error_coeff_set)
    inflate_constraints_individually = property(_tesseract_python.BasicTrustRegionSQPParameters_inflate_constraints_individually_get, _tesseract_python.BasicTrustRegionSQPParameters_inflate_constraints_individually_set)
    trust_box_size = property(_tesseract_python.BasicTrustRegionSQPParameters_trust_box_size_get, _tesseract_python.BasicTrustRegionSQPParameters_trust_box_size_set)
    log_results = property(_tesseract_python.BasicTrustRegionSQPParameters_log_results_get, _tesseract_python.BasicTrustRegionSQPParameters_log_results_set)
    log_dir = property(_tesseract_python.BasicTrustRegionSQPParameters_log_dir_get, _tesseract_python.BasicTrustRegionSQPParameters_log_dir_set)

    def __init__(self):
        _tesseract_python.BasicTrustRegionSQPParameters_swiginit(self, _tesseract_python.new_BasicTrustRegionSQPParameters())
    __swig_destroy__ = _tesseract_python.delete_BasicTrustRegionSQPParameters

# Register BasicTrustRegionSQPParameters in _tesseract_python:
_tesseract_python.BasicTrustRegionSQPParameters_swigregister(BasicTrustRegionSQPParameters)

TT_COST = _tesseract_python.TT_COST
TT_CNT = _tesseract_python.TT_CNT
TT_USE_TIME = _tesseract_python.TT_USE_TIME
class TrajOptProb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.TrajOptProb_swiginit(self, _tesseract_python.new_TrajOptProb(*args))
    __swig_destroy__ = _tesseract_python.delete_TrajOptProb

    def GetNumSteps(self) -> "int":
        return _tesseract_python.TrajOptProb_GetNumSteps(self)

    def GetNumDOF(self) -> "int":
        return _tesseract_python.TrajOptProb_GetNumDOF(self)

    def GetKin(self) -> "tesseract_kinematics::ForwardKinematics::ConstPtr":
        return _tesseract_python.TrajOptProb_GetKin(self)

    def GetEnv(self) -> "tesseract_environment::Environment::ConstPtr":
        return _tesseract_python.TrajOptProb_GetEnv(self)

    def SetInitTraj(self, x: "trajopt::TrajArray const &") -> "void":
        return _tesseract_python.TrajOptProb_SetInitTraj(self, x)

    def GetInitTraj(self) -> "trajopt::TrajArray":
        return _tesseract_python.TrajOptProb_GetInitTraj(self)

    def GetHasTime(self) -> "bool":
        return _tesseract_python.TrajOptProb_GetHasTime(self)

    def SetHasTime(self, tmp: "bool") -> "void":
        return _tesseract_python.TrajOptProb_SetHasTime(self, tmp)

# Register TrajOptProb in _tesseract_python:
_tesseract_python.TrajOptProb_swigregister(TrajOptProb)

class TrajOptResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    cost_names = property(_tesseract_python.TrajOptResult_cost_names_get, _tesseract_python.TrajOptResult_cost_names_set)
    cnt_names = property(_tesseract_python.TrajOptResult_cnt_names_get, _tesseract_python.TrajOptResult_cnt_names_set)
    cost_vals = property(_tesseract_python.TrajOptResult_cost_vals_get, _tesseract_python.TrajOptResult_cost_vals_set)
    cnt_viols = property(_tesseract_python.TrajOptResult_cnt_viols_get, _tesseract_python.TrajOptResult_cnt_viols_set)
    traj = property(_tesseract_python.TrajOptResult_traj_get, _tesseract_python.TrajOptResult_traj_set)
    __swig_destroy__ = _tesseract_python.delete_TrajOptResult

# Register TrajOptResult in _tesseract_python:
_tesseract_python.TrajOptResult_swigregister(TrajOptResult)

class BasicInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start_fixed = property(_tesseract_python.BasicInfo_start_fixed_get, _tesseract_python.BasicInfo_start_fixed_set)
    n_steps = property(_tesseract_python.BasicInfo_n_steps_get, _tesseract_python.BasicInfo_n_steps_set)
    manip = property(_tesseract_python.BasicInfo_manip_get, _tesseract_python.BasicInfo_manip_set)
    robot = property(_tesseract_python.BasicInfo_robot_get, _tesseract_python.BasicInfo_robot_set)
    dofs_fixed = property(_tesseract_python.BasicInfo_dofs_fixed_get, _tesseract_python.BasicInfo_dofs_fixed_set)
    convex_solver = property(_tesseract_python.BasicInfo_convex_solver_get, _tesseract_python.BasicInfo_convex_solver_set)
    use_time = property(_tesseract_python.BasicInfo_use_time_get, _tesseract_python.BasicInfo_use_time_set)
    dt_upper_lim = property(_tesseract_python.BasicInfo_dt_upper_lim_get, _tesseract_python.BasicInfo_dt_upper_lim_set)
    dt_lower_lim = property(_tesseract_python.BasicInfo_dt_lower_lim_get, _tesseract_python.BasicInfo_dt_lower_lim_set)

    def __init__(self):
        _tesseract_python.BasicInfo_swiginit(self, _tesseract_python.new_BasicInfo())
    __swig_destroy__ = _tesseract_python.delete_BasicInfo

# Register BasicInfo in _tesseract_python:
_tesseract_python.BasicInfo_swigregister(BasicInfo)

class InitInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STATIONARY = _tesseract_python.InitInfo_STATIONARY
    JOINT_INTERPOLATED = _tesseract_python.InitInfo_JOINT_INTERPOLATED
    GIVEN_TRAJ = _tesseract_python.InitInfo_GIVEN_TRAJ
    type = property(_tesseract_python.InitInfo_type_get, _tesseract_python.InitInfo_type_set)
    data = property(_tesseract_python.InitInfo_data_get, _tesseract_python.InitInfo_data_set)
    dt = property(_tesseract_python.InitInfo_dt_get, _tesseract_python.InitInfo_dt_set)

    def __init__(self):
        _tesseract_python.InitInfo_swiginit(self, _tesseract_python.new_InitInfo())
    __swig_destroy__ = _tesseract_python.delete_InitInfo

# Register InitInfo in _tesseract_python:
_tesseract_python.InitInfo_swigregister(InitInfo)

class TermInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    name = property(_tesseract_python.TermInfo_name_get, _tesseract_python.TermInfo_name_set)
    term_type = property(_tesseract_python.TermInfo_term_type_get, _tesseract_python.TermInfo_term_type_set)

    def getSupportedTypes(self) -> "int":
        return _tesseract_python.TermInfo_getSupportedTypes(self)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.TermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.TermInfo_hatch(self, prob)

    @staticmethod
    def fromName(type: "std::string const &") -> "trajopt::TermInfo::Ptr":
        return _tesseract_python.TermInfo_fromName(type)
    __swig_destroy__ = _tesseract_python.delete_TermInfo

# Register TermInfo in _tesseract_python:
_tesseract_python.TermInfo_swigregister(TermInfo)

def TermInfo_fromName(type: "std::string const &") -> "trajopt::TermInfo::Ptr":
    return _tesseract_python.TermInfo_fromName(type)

class ProblemConstructionInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    basic_info = property(_tesseract_python.ProblemConstructionInfo_basic_info_get, _tesseract_python.ProblemConstructionInfo_basic_info_set)
    opt_info = property(_tesseract_python.ProblemConstructionInfo_opt_info_get, _tesseract_python.ProblemConstructionInfo_opt_info_set)
    cost_infos = property(_tesseract_python.ProblemConstructionInfo_cost_infos_get, _tesseract_python.ProblemConstructionInfo_cost_infos_set)
    cnt_infos = property(_tesseract_python.ProblemConstructionInfo_cnt_infos_get, _tesseract_python.ProblemConstructionInfo_cnt_infos_set)
    init_info = property(_tesseract_python.ProblemConstructionInfo_init_info_get, _tesseract_python.ProblemConstructionInfo_init_info_set)
    env = property(_tesseract_python.ProblemConstructionInfo_env_get, _tesseract_python.ProblemConstructionInfo_env_set)
    kin = property(_tesseract_python.ProblemConstructionInfo_kin_get, _tesseract_python.ProblemConstructionInfo_kin_set)

    def getManipulator(self, name: "std::string const &") -> "tesseract_kinematics::ForwardKinematics::ConstPtr":
        return _tesseract_python.ProblemConstructionInfo_getManipulator(self, name)

    def __init__(self, tesseract: "tesseract::Tesseract::ConstPtr"):
        _tesseract_python.ProblemConstructionInfo_swiginit(self, _tesseract_python.new_ProblemConstructionInfo(tesseract))

    def fromJson(self, v: "Json::Value const &") -> "void":
        return _tesseract_python.ProblemConstructionInfo_fromJson(self, v)
    __swig_destroy__ = _tesseract_python.delete_ProblemConstructionInfo

# Register ProblemConstructionInfo in _tesseract_python:
_tesseract_python.ProblemConstructionInfo_swigregister(ProblemConstructionInfo)

class DynamicCartPoseTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestep = property(_tesseract_python.DynamicCartPoseTermInfo_timestep_get, _tesseract_python.DynamicCartPoseTermInfo_timestep_set)
    target = property(_tesseract_python.DynamicCartPoseTermInfo_target_get, _tesseract_python.DynamicCartPoseTermInfo_target_set)
    pos_coeffs = property(_tesseract_python.DynamicCartPoseTermInfo_pos_coeffs_get, _tesseract_python.DynamicCartPoseTermInfo_pos_coeffs_set)
    rot_coeffs = property(_tesseract_python.DynamicCartPoseTermInfo_rot_coeffs_get, _tesseract_python.DynamicCartPoseTermInfo_rot_coeffs_set)
    link = property(_tesseract_python.DynamicCartPoseTermInfo_link_get, _tesseract_python.DynamicCartPoseTermInfo_link_set)
    tcp = property(_tesseract_python.DynamicCartPoseTermInfo_tcp_get, _tesseract_python.DynamicCartPoseTermInfo_tcp_set)
    target_tcp = property(_tesseract_python.DynamicCartPoseTermInfo_target_tcp_get, _tesseract_python.DynamicCartPoseTermInfo_target_tcp_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.DynamicCartPoseTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.DynamicCartPoseTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.DynamicCartPoseTermInfo_swiginit(self, _tesseract_python.new_DynamicCartPoseTermInfo())
    __swig_destroy__ = _tesseract_python.delete_DynamicCartPoseTermInfo

# Register DynamicCartPoseTermInfo in _tesseract_python:
_tesseract_python.DynamicCartPoseTermInfo_swigregister(DynamicCartPoseTermInfo)

class CartPoseTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestep = property(_tesseract_python.CartPoseTermInfo_timestep_get, _tesseract_python.CartPoseTermInfo_timestep_set)
    xyz = property(_tesseract_python.CartPoseTermInfo_xyz_get, _tesseract_python.CartPoseTermInfo_xyz_set)
    wxyz = property(_tesseract_python.CartPoseTermInfo_wxyz_get, _tesseract_python.CartPoseTermInfo_wxyz_set)
    pos_coeffs = property(_tesseract_python.CartPoseTermInfo_pos_coeffs_get, _tesseract_python.CartPoseTermInfo_pos_coeffs_set)
    rot_coeffs = property(_tesseract_python.CartPoseTermInfo_rot_coeffs_get, _tesseract_python.CartPoseTermInfo_rot_coeffs_set)
    link = property(_tesseract_python.CartPoseTermInfo_link_get, _tesseract_python.CartPoseTermInfo_link_set)
    tcp = property(_tesseract_python.CartPoseTermInfo_tcp_get, _tesseract_python.CartPoseTermInfo_tcp_set)
    target = property(_tesseract_python.CartPoseTermInfo_target_get, _tesseract_python.CartPoseTermInfo_target_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.CartPoseTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.CartPoseTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.CartPoseTermInfo_swiginit(self, _tesseract_python.new_CartPoseTermInfo())
    __swig_destroy__ = _tesseract_python.delete_CartPoseTermInfo

# Register CartPoseTermInfo in _tesseract_python:
_tesseract_python.CartPoseTermInfo_swigregister(CartPoseTermInfo)

class CartVelTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    first_step = property(_tesseract_python.CartVelTermInfo_first_step_get, _tesseract_python.CartVelTermInfo_first_step_set)
    last_step = property(_tesseract_python.CartVelTermInfo_last_step_get, _tesseract_python.CartVelTermInfo_last_step_set)
    link = property(_tesseract_python.CartVelTermInfo_link_get, _tesseract_python.CartVelTermInfo_link_set)
    max_displacement = property(_tesseract_python.CartVelTermInfo_max_displacement_get, _tesseract_python.CartVelTermInfo_max_displacement_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.CartVelTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.CartVelTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.CartVelTermInfo_swiginit(self, _tesseract_python.new_CartVelTermInfo())
    __swig_destroy__ = _tesseract_python.delete_CartVelTermInfo

# Register CartVelTermInfo in _tesseract_python:
_tesseract_python.CartVelTermInfo_swigregister(CartVelTermInfo)

class JointPosTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeffs = property(_tesseract_python.JointPosTermInfo_coeffs_get, _tesseract_python.JointPosTermInfo_coeffs_set)
    targets = property(_tesseract_python.JointPosTermInfo_targets_get, _tesseract_python.JointPosTermInfo_targets_set)
    upper_tols = property(_tesseract_python.JointPosTermInfo_upper_tols_get, _tesseract_python.JointPosTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_python.JointPosTermInfo_lower_tols_get, _tesseract_python.JointPosTermInfo_lower_tols_set)
    first_step = property(_tesseract_python.JointPosTermInfo_first_step_get, _tesseract_python.JointPosTermInfo_first_step_set)
    last_step = property(_tesseract_python.JointPosTermInfo_last_step_get, _tesseract_python.JointPosTermInfo_last_step_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.JointPosTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.JointPosTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.JointPosTermInfo_swiginit(self, _tesseract_python.new_JointPosTermInfo())
    __swig_destroy__ = _tesseract_python.delete_JointPosTermInfo

# Register JointPosTermInfo in _tesseract_python:
_tesseract_python.JointPosTermInfo_swigregister(JointPosTermInfo)

class JointVelTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeffs = property(_tesseract_python.JointVelTermInfo_coeffs_get, _tesseract_python.JointVelTermInfo_coeffs_set)
    targets = property(_tesseract_python.JointVelTermInfo_targets_get, _tesseract_python.JointVelTermInfo_targets_set)
    upper_tols = property(_tesseract_python.JointVelTermInfo_upper_tols_get, _tesseract_python.JointVelTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_python.JointVelTermInfo_lower_tols_get, _tesseract_python.JointVelTermInfo_lower_tols_set)
    first_step = property(_tesseract_python.JointVelTermInfo_first_step_get, _tesseract_python.JointVelTermInfo_first_step_set)
    last_step = property(_tesseract_python.JointVelTermInfo_last_step_get, _tesseract_python.JointVelTermInfo_last_step_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.JointVelTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.JointVelTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.JointVelTermInfo_swiginit(self, _tesseract_python.new_JointVelTermInfo())
    __swig_destroy__ = _tesseract_python.delete_JointVelTermInfo

# Register JointVelTermInfo in _tesseract_python:
_tesseract_python.JointVelTermInfo_swigregister(JointVelTermInfo)

class JointAccTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeffs = property(_tesseract_python.JointAccTermInfo_coeffs_get, _tesseract_python.JointAccTermInfo_coeffs_set)
    targets = property(_tesseract_python.JointAccTermInfo_targets_get, _tesseract_python.JointAccTermInfo_targets_set)
    upper_tols = property(_tesseract_python.JointAccTermInfo_upper_tols_get, _tesseract_python.JointAccTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_python.JointAccTermInfo_lower_tols_get, _tesseract_python.JointAccTermInfo_lower_tols_set)
    first_step = property(_tesseract_python.JointAccTermInfo_first_step_get, _tesseract_python.JointAccTermInfo_first_step_set)
    last_step = property(_tesseract_python.JointAccTermInfo_last_step_get, _tesseract_python.JointAccTermInfo_last_step_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.JointAccTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.JointAccTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.JointAccTermInfo_swiginit(self, _tesseract_python.new_JointAccTermInfo())
    __swig_destroy__ = _tesseract_python.delete_JointAccTermInfo

# Register JointAccTermInfo in _tesseract_python:
_tesseract_python.JointAccTermInfo_swigregister(JointAccTermInfo)

class JointJerkTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeffs = property(_tesseract_python.JointJerkTermInfo_coeffs_get, _tesseract_python.JointJerkTermInfo_coeffs_set)
    targets = property(_tesseract_python.JointJerkTermInfo_targets_get, _tesseract_python.JointJerkTermInfo_targets_set)
    upper_tols = property(_tesseract_python.JointJerkTermInfo_upper_tols_get, _tesseract_python.JointJerkTermInfo_upper_tols_set)
    lower_tols = property(_tesseract_python.JointJerkTermInfo_lower_tols_get, _tesseract_python.JointJerkTermInfo_lower_tols_set)
    first_step = property(_tesseract_python.JointJerkTermInfo_first_step_get, _tesseract_python.JointJerkTermInfo_first_step_set)
    last_step = property(_tesseract_python.JointJerkTermInfo_last_step_get, _tesseract_python.JointJerkTermInfo_last_step_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.JointJerkTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.JointJerkTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.JointJerkTermInfo_swiginit(self, _tesseract_python.new_JointJerkTermInfo())
    __swig_destroy__ = _tesseract_python.delete_JointJerkTermInfo

# Register JointJerkTermInfo in _tesseract_python:
_tesseract_python.JointJerkTermInfo_swigregister(JointJerkTermInfo)

class SafetyMarginData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, default_safety_margin: "double const &", default_safety_margin_coeff: "double const &"):
        _tesseract_python.SafetyMarginData_swiginit(self, _tesseract_python.new_SafetyMarginData(default_safety_margin, default_safety_margin_coeff))

    def setPairSafetyMarginData(self, obj1: "std::string const &", obj2: "std::string const &", safety_margin: "double const &", safety_margin_coeff: "double const &") -> "void":
        return _tesseract_python.SafetyMarginData_setPairSafetyMarginData(self, obj1, obj2, safety_margin, safety_margin_coeff)

    def getPairSafetyMarginData(self, obj1: "std::string const &", obj2: "std::string const &") -> "Eigen::Vector2d":
        return _tesseract_python.SafetyMarginData_getPairSafetyMarginData(self, obj1, obj2)

    def getMaxSafetyMargin(self) -> "double const":
        return _tesseract_python.SafetyMarginData_getMaxSafetyMargin(self)
    __swig_destroy__ = _tesseract_python.delete_SafetyMarginData

# Register SafetyMarginData in _tesseract_python:
_tesseract_python.SafetyMarginData_swigregister(SafetyMarginData)


def createSafetyMarginDataVector(num_elements: "int", default_safety_margin: "double const &", default_safety_margin_coeff: "double const &") -> "std::vector< std::shared_ptr< trajopt::SafetyMarginData >,std::allocator< std::shared_ptr< trajopt::SafetyMarginData > > >":
    return _tesseract_python.createSafetyMarginDataVector(num_elements, default_safety_margin, default_safety_margin_coeff)
CollisionEvaluatorType_SINGLE_TIMESTEP = _tesseract_python.CollisionEvaluatorType_SINGLE_TIMESTEP
CollisionEvaluatorType_DISCRETE_CONTINUOUS = _tesseract_python.CollisionEvaluatorType_DISCRETE_CONTINUOUS
CollisionEvaluatorType_CAST_CONTINUOUS = _tesseract_python.CollisionEvaluatorType_CAST_CONTINUOUS
class CollisionTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    first_step = property(_tesseract_python.CollisionTermInfo_first_step_get, _tesseract_python.CollisionTermInfo_first_step_set)
    last_step = property(_tesseract_python.CollisionTermInfo_last_step_get, _tesseract_python.CollisionTermInfo_last_step_set)
    evaluator_type = property(_tesseract_python.CollisionTermInfo_evaluator_type_get, _tesseract_python.CollisionTermInfo_evaluator_type_set)
    fixed_steps = property(_tesseract_python.CollisionTermInfo_fixed_steps_get, _tesseract_python.CollisionTermInfo_fixed_steps_set)
    longest_valid_segment_length = property(_tesseract_python.CollisionTermInfo_longest_valid_segment_length_get, _tesseract_python.CollisionTermInfo_longest_valid_segment_length_set)
    info = property(_tesseract_python.CollisionTermInfo_info_get, _tesseract_python.CollisionTermInfo_info_set)
    contact_test_type = property(_tesseract_python.CollisionTermInfo_contact_test_type_get, _tesseract_python.CollisionTermInfo_contact_test_type_set)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.CollisionTermInfo_fromJson(self, pci, v)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.CollisionTermInfo_hatch(self, prob)

    def __init__(self):
        _tesseract_python.CollisionTermInfo_swiginit(self, _tesseract_python.new_CollisionTermInfo())
    __swig_destroy__ = _tesseract_python.delete_CollisionTermInfo

# Register CollisionTermInfo in _tesseract_python:
_tesseract_python.CollisionTermInfo_swigregister(CollisionTermInfo)

class TotalTimeTermInfo(TermInfo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coeff = property(_tesseract_python.TotalTimeTermInfo_coeff_get, _tesseract_python.TotalTimeTermInfo_coeff_set)
    limit = property(_tesseract_python.TotalTimeTermInfo_limit_get, _tesseract_python.TotalTimeTermInfo_limit_set)

    def hatch(self, prob: "TrajOptProb") -> "void":
        return _tesseract_python.TotalTimeTermInfo_hatch(self, prob)

    def fromJson(self, pci: "ProblemConstructionInfo", v: "Json::Value const &") -> "void":
        return _tesseract_python.TotalTimeTermInfo_fromJson(self, pci, v)

    def __init__(self):
        _tesseract_python.TotalTimeTermInfo_swiginit(self, _tesseract_python.new_TotalTimeTermInfo())
    __swig_destroy__ = _tesseract_python.delete_TotalTimeTermInfo

# Register TotalTimeTermInfo in _tesseract_python:
_tesseract_python.TotalTimeTermInfo_swigregister(TotalTimeTermInfo)


def ConstructProblem(*args) -> "trajopt::TrajOptProb::Ptr":
    return _tesseract_python.ConstructProblem(*args)

def OptimizeProblem(arg1: "trajopt::TrajOptProb::Ptr", plotter: "tesseract_visualization::Visualization::Ptr const &"=0) -> "trajopt::TrajOptResult::Ptr":
    return _tesseract_python.OptimizeProblem(arg1, plotter)
class TrajOptPlannerConfig(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.TrajOptPlannerConfig_swiginit(self, _tesseract_python.new_TrajOptPlannerConfig(*args))
    __swig_destroy__ = _tesseract_python.delete_TrajOptPlannerConfig

    def generate(self) -> "bool":
        return _tesseract_python.TrajOptPlannerConfig_generate(self)
    params = property(_tesseract_python.TrajOptPlannerConfig_params_get, _tesseract_python.TrajOptPlannerConfig_params_set)
    prob = property(_tesseract_python.TrajOptPlannerConfig_prob_get, _tesseract_python.TrajOptPlannerConfig_prob_set)
    longest_valid_segment_fraction = property(_tesseract_python.TrajOptPlannerConfig_longest_valid_segment_fraction_get, _tesseract_python.TrajOptPlannerConfig_longest_valid_segment_fraction_set)
    longest_valid_segment_length = property(_tesseract_python.TrajOptPlannerConfig_longest_valid_segment_length_get, _tesseract_python.TrajOptPlannerConfig_longest_valid_segment_length_set)

# Register TrajOptPlannerConfig in _tesseract_python:
_tesseract_python.TrajOptPlannerConfig_swigregister(TrajOptPlannerConfig)

class TrajOptPlannerDefaultConfig(TrajOptPlannerConfig):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.TrajOptPlannerDefaultConfig_swiginit(self, _tesseract_python.new_TrajOptPlannerDefaultConfig(*args))

    def generatePCI(self) -> "std::shared_ptr< trajopt::ProblemConstructionInfo >":
        return _tesseract_python.TrajOptPlannerDefaultConfig_generatePCI(self)

    def generate(self) -> "bool":
        return _tesseract_python.TrajOptPlannerDefaultConfig_generate(self)
    tesseract = property(_tesseract_python.TrajOptPlannerDefaultConfig_tesseract_get, _tesseract_python.TrajOptPlannerDefaultConfig_tesseract_set)
    manipulator = property(_tesseract_python.TrajOptPlannerDefaultConfig_manipulator_get, _tesseract_python.TrajOptPlannerDefaultConfig_manipulator_set)
    link = property(_tesseract_python.TrajOptPlannerDefaultConfig_link_get, _tesseract_python.TrajOptPlannerDefaultConfig_link_set)
    optimizer = property(_tesseract_python.TrajOptPlannerDefaultConfig_optimizer_get, _tesseract_python.TrajOptPlannerDefaultConfig_optimizer_set)
    tcp = property(_tesseract_python.TrajOptPlannerDefaultConfig_tcp_get, _tesseract_python.TrajOptPlannerDefaultConfig_tcp_set)
    target_waypoints = property(_tesseract_python.TrajOptPlannerDefaultConfig_target_waypoints_get, _tesseract_python.TrajOptPlannerDefaultConfig_target_waypoints_set)
    init_type = property(_tesseract_python.TrajOptPlannerDefaultConfig_init_type_get, _tesseract_python.TrajOptPlannerDefaultConfig_init_type_set)
    seed_trajectory = property(_tesseract_python.TrajOptPlannerDefaultConfig_seed_trajectory_get, _tesseract_python.TrajOptPlannerDefaultConfig_seed_trajectory_set)
    configuration = property(_tesseract_python.TrajOptPlannerDefaultConfig_configuration_get, _tesseract_python.TrajOptPlannerDefaultConfig_configuration_set)
    contact_test_type = property(_tesseract_python.TrajOptPlannerDefaultConfig_contact_test_type_get, _tesseract_python.TrajOptPlannerDefaultConfig_contact_test_type_set)
    collision_cost_config = property(_tesseract_python.TrajOptPlannerDefaultConfig_collision_cost_config_get, _tesseract_python.TrajOptPlannerDefaultConfig_collision_cost_config_set)
    collision_constraint_config = property(_tesseract_python.TrajOptPlannerDefaultConfig_collision_constraint_config_get, _tesseract_python.TrajOptPlannerDefaultConfig_collision_constraint_config_set)
    smooth_velocities = property(_tesseract_python.TrajOptPlannerDefaultConfig_smooth_velocities_get, _tesseract_python.TrajOptPlannerDefaultConfig_smooth_velocities_set)
    velocity_coeff = property(_tesseract_python.TrajOptPlannerDefaultConfig_velocity_coeff_get, _tesseract_python.TrajOptPlannerDefaultConfig_velocity_coeff_set)
    smooth_accelerations = property(_tesseract_python.TrajOptPlannerDefaultConfig_smooth_accelerations_get, _tesseract_python.TrajOptPlannerDefaultConfig_smooth_accelerations_set)
    acceleration_coeff = property(_tesseract_python.TrajOptPlannerDefaultConfig_acceleration_coeff_get, _tesseract_python.TrajOptPlannerDefaultConfig_acceleration_coeff_set)
    smooth_jerks = property(_tesseract_python.TrajOptPlannerDefaultConfig_smooth_jerks_get, _tesseract_python.TrajOptPlannerDefaultConfig_smooth_jerks_set)
    jerk_coeff = property(_tesseract_python.TrajOptPlannerDefaultConfig_jerk_coeff_get, _tesseract_python.TrajOptPlannerDefaultConfig_jerk_coeff_set)
    avoid_singularity = property(_tesseract_python.TrajOptPlannerDefaultConfig_avoid_singularity_get, _tesseract_python.TrajOptPlannerDefaultConfig_avoid_singularity_set)
    avoid_singularity_coeff = property(_tesseract_python.TrajOptPlannerDefaultConfig_avoid_singularity_coeff_get, _tesseract_python.TrajOptPlannerDefaultConfig_avoid_singularity_coeff_set)
    __swig_destroy__ = _tesseract_python.delete_TrajOptPlannerDefaultConfig

# Register TrajOptPlannerDefaultConfig in _tesseract_python:
_tesseract_python.TrajOptPlannerDefaultConfig_swigregister(TrajOptPlannerDefaultConfig)

class TrajOptMotionPlanner(MotionPlanner):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _tesseract_python.TrajOptMotionPlanner_swiginit(self, _tesseract_python.new_TrajOptMotionPlanner(*args))
    __swig_destroy__ = _tesseract_python.delete_TrajOptMotionPlanner

    def setConfiguration(self, config: "tesseract_motion_planners::TrajOptPlannerConfig::Ptr const") -> "void":
        return _tesseract_python.TrajOptMotionPlanner_setConfiguration(self, config)

    def _solve(self, *args) -> "tesseract_common::StatusCode":
        return _tesseract_python.TrajOptMotionPlanner__solve(self, *args)

    def terminate(self) -> "bool":
        return _tesseract_python.TrajOptMotionPlanner_terminate(self)

    def clear(self) -> "void":
        return _tesseract_python.TrajOptMotionPlanner_clear(self)

    def isConfigured(self) -> "tesseract_common::StatusCode":
        return _tesseract_python.TrajOptMotionPlanner_isConfigured(self)

# Register TrajOptMotionPlanner in _tesseract_python:
_tesseract_python.TrajOptMotionPlanner_swigregister(TrajOptMotionPlanner)

class TrajOptMotionPlannerStatusCategory(StatusCategory):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "std::string"):
        _tesseract_python.TrajOptMotionPlannerStatusCategory_swiginit(self, _tesseract_python.new_TrajOptMotionPlannerStatusCategory(name))

    def name(self) -> "std::string const &":
        return _tesseract_python.TrajOptMotionPlannerStatusCategory_name(self)

    def message(self, code: "int") -> "std::string":
        return _tesseract_python.TrajOptMotionPlannerStatusCategory_message(self, code)
    IsConfigured = _tesseract_python.TrajOptMotionPlannerStatusCategory_IsConfigured
    SolutionFound = _tesseract_python.TrajOptMotionPlannerStatusCategory_SolutionFound
    IsNotConfigured = _tesseract_python.TrajOptMotionPlannerStatusCategory_IsNotConfigured
    FailedToParseConfig = _tesseract_python.TrajOptMotionPlannerStatusCategory_FailedToParseConfig
    FailedToFindValidSolution = _tesseract_python.TrajOptMotionPlannerStatusCategory_FailedToFindValidSolution
    FoundValidSolutionInCollision = _tesseract_python.TrajOptMotionPlannerStatusCategory_FoundValidSolutionInCollision
    __swig_destroy__ = _tesseract_python.delete_TrajOptMotionPlannerStatusCategory

# Register TrajOptMotionPlannerStatusCategory in _tesseract_python:
_tesseract_python.TrajOptMotionPlannerStatusCategory_swigregister(TrajOptMotionPlannerStatusCategory)



